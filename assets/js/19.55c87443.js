(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{355:function(_,v,l){"use strict";l.r(v);var i=l(28),t=Object(i.a)({},(function(){var _=this,v=_.$createElement,l=_._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[l("h1",{attrs:{id:"algorithm-dynamic-programming"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#algorithm-dynamic-programming"}},[_._v("#")]),_._v(" Algorithm - Dynamic Programming")]),_._v(" "),l("p",[_._v("By "),l("a",{attrs:{href:"https://yuweiyin.github.io/",target:"_blank",rel:"noopener noreferrer"}},[_._v("YuweiYin"),l("OutboundLink")],1)]),_._v(" "),l("h2",{attrs:{id:"目录"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[_._v("#")]),_._v(" 目录")]),_._v(" "),l("ul",[l("li",[_._v("四边形不等式理论")]),_._v(" "),l("li",[_._v("不完全状态记录\n"),l("ul",[l("li",[_._v("青蛙过河问题")]),_._v(" "),l("li",[_._v("利用区间 DP")])])]),_._v(" "),l("li",[_._v("背包类问题\n"),l("ul",[l("li",[_._v("0-1 背包 (经典问题)")]),_._v(" "),l("li",[_._v("无限背包 (经典问题)")]),_._v(" "),l("li",[_._v("判定性背包问题")]),_._v(" "),l("li",[_._v("带附属关系的背包问题")]),_._v(" "),l("li",[_._v("+/-1 背包问题")]),_._v(" "),l("li",[_._v("双背包求最优值")]),_._v(" "),l("li",[_._v("构造三角形问题")]),_._v(" "),l("li",[_._v("带上下界限制的背包问题 (012背包)")])])]),_._v(" "),l("li",[_._v("线性的动态规划问题\n"),l("ul",[l("li",[_._v("积木游戏问题")]),_._v(" "),l("li",[_._v("决斗（判定性问题）")]),_._v(" "),l("li",[_._v("圆的最大多边形问题")]),_._v(" "),l("li",[_._v("统计单词个数问题")]),_._v(" "),l("li",[_._v("棋盘分割")]),_._v(" "),l("li",[_._v("日程安排问题")]),_._v(" "),l("li",[_._v("最小逼近问题 (求出两数之比最接近某数 / 两数之和等于某数等等)")]),_._v(" "),l("li",[_._v("方块消除游戏 (某区间可以连续消去求最大效益)")]),_._v(" "),l("li",[_._v("资源分配问题")]),_._v(" "),l("li",[_._v("数字三角形问题")]),_._v(" "),l("li",[_._v("漂亮的打印")]),_._v(" "),l("li",[_._v("邮局问题与构造答案")]),_._v(" "),l("li",[_._v("最高积木问题")]),_._v(" "),l("li",[_._v("两段连续和最大")]),_._v(" "),l("li",[_._v("2 次幂和问题")]),_._v(" "),l("li",[_._v("N 个数的最大 M 段子段和")]),_._v(" "),l("li",[_._v("交叉最大数问题")])])]),_._v(" "),l("li",[_._v("判定性问题的 DP (如判定整除、判定可达性等)\n"),l("ul",[l("li",[_._v("模 K 问题的 DP")]),_._v(" "),l("li",[_._v("特殊的模 K 问题，求最大(最小)模 K 的数")]),_._v(" "),l("li",[_._v("变换数问题")])])]),_._v(" "),l("li",[_._v("单调性优化的动态规划\n"),l("ul",[l("li",[_._v("1-SUM 问题")]),_._v(" "),l("li",[_._v("2-SUM 问题")]),_._v(" "),l("li",[_._v("序列划分问题 (单调队列优化)")])])]),_._v(" "),l("li",[_._v("剖分问题 (多边形剖分/石子合并/圆的剖分/乘积最大)\n"),l("ul",[l("li",[_._v("凸多边形的三角剖分问题")]),_._v(" "),l("li",[_._v("乘积最大问题")]),_._v(" "),l("li",[_._v("多边形游戏 (多边形边上是操作符，顶点有权值)")]),_._v(" "),l("li",[_._v("石子合并 (N^3 / N^2 / NLogN 各种优化)")])])]),_._v(" "),l("li",[_._v("贪心的动态规划\n"),l("ul",[l("li",[_._v("最优装载问题")]),_._v(" "),l("li",[_._v("部分背包问题")]),_._v(" "),l("li",[_._v("乘船问题")]),_._v(" "),l("li",[_._v("贪心策略")]),_._v(" "),l("li",[_._v("双机调度问题 Johnson 算法")])])]),_._v(" "),l("li",[_._v("状态 DP\n"),l("ul",[l("li",[_._v("牛仔射击问题(博弈类)")]),_._v(" "),l("li",[_._v("哈密顿路径的状态 DP")]),_._v(" "),l("li",[_._v("两支点天平平衡问题")]),_._v(" "),l("li",[_._v("一个有向图的最接近二部图")])])]),_._v(" "),l("li",[_._v("树型 DP\n"),l("ul",[l("li",[_._v("完美服务器问题 (每个节点有 3 种状态)")]),_._v(" "),l("li",[_._v("小胖守皇宫问题")]),_._v(" "),l("li",[_._v("网络收费问题")]),_._v(" "),l("li",[_._v("树中漫游问题")]),_._v(" "),l("li",[_._v("树上的博弈")]),_._v(" "),l("li",[_._v("树的最大独立集问题")]),_._v(" "),l("li",[_._v("树的最大平衡值问题")]),_._v(" "),l("li",[_._v("构造树的最小环")])])])])])}),[],!1,null,null,null);v.default=t.exports}}]);