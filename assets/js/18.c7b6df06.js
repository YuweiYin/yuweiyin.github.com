(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{332:function(t,s,a){"use strict";a.r(s);var n=a(28),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"algorithm-data-structure-segment-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#algorithm-data-structure-segment-tree"}},[t._v("#")]),t._v(" Algorithm - Data Structure - Segment Tree")]),t._v(" "),a("p",[t._v("Create Date: 2020.05.01")]),t._v(" "),a("p",[t._v("Last Update Date: 2020.05.02")]),t._v(" "),a("p",[t._v("By "),a("a",{attrs:{href:"https://yuweiyin.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("YuweiYin"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("p",[t._v("线段树 (Segment Tree, ST)")]),t._v(" "),a("h2",{attrs:{id:"场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[t._v("#")]),t._v(" 场景")]),t._v(" "),a("p",[t._v("线段树常用作于求 array 中区间最大值/最小值、区间的和，这类区间的"),a("strong",[t._v("某种特性值")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("array：依下标 index 连续存储的"),a("strong",[t._v("数值")]),t._v("数组/列表")]),t._v(" "),a("li",[t._v("update：修改 array 中某个下标 index 对应的数值")]),t._v(" "),a("li",[t._v("query：查询 array 中某一个下标区间 [left, right) 中的"),a("strong",[t._v("某种特性值")]),t._v("（比如：区间最值、区间的和）")])]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("ol",[a("li",[t._v("array 中存储的也可以不是数值，而是某种结构体，但是该结构体一定要两两可以比较序关系（"),a("strong",[t._v("全序")]),t._v("关系）")]),t._v(" "),a("li",[t._v("update 和 query 可以有"),a("strong",[t._v("很多次")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"场景分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景分析"}},[t._v("#")]),t._v(" 场景分析")]),t._v(" "),a("h3",{attrs:{id:"数组-列表结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组-列表结构"}},[t._v("#")]),t._v(" 数组/列表结构")]),t._v(" "),a("p",[t._v("如果采用普通的数组/列表结构进行处理，那么 update 操作的时间复杂度为 O(1)，query 操作的时间复杂度为 O(n)，其中 n 为 array 的长度。")]),t._v(" "),a("p",[t._v("设有 u 次 update、q 次 query，则整体时间复杂度为 O(u + qn)")]),t._v(" "),a("p",[t._v("在 query 较多较频繁的场景下，该结构的整体时间复杂度较高。")]),t._v(" "),a("h3",{attrs:{id:"线段树结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线段树结构"}},[t._v("#")]),t._v(" 线段树结构")]),t._v(" "),a("p",[t._v("而线段树通过维护不同粒度的区间特性值，其形状是完全二叉树（树高为 O(log n)），以二分查找的思路来加速 query 操作，使其时间复杂度降低到了 O(log n)。")]),t._v(" "),a("p",[t._v("为了维护不同粒度的区间特性值，线段树在 update 操作时是从叶向上逐级更新，时间复杂度增加到了 O(log n)。")]),t._v(" "),a("p",[t._v("设有 u 次 update、q 次 query，则整体时间复杂度为 O(u log n + q log n) = O((u + q) log n)")]),t._v(" "),a("p",[t._v("但是，一旦 array 长度变化，线段树就需要重建了，每次重建的时间复杂度为 O(n)。")]),t._v(" "),a("p",[t._v("因此，在 n 值较大（数组较长）、且数组长度不频繁变动的情况下，线段树对 query 操作效率的提升效果显著。")]),t._v(" "),a("h2",{attrs:{id:"设计-细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计-细节"}},[t._v("#")]),t._v(" 设计 & 细节")]),t._v(" "),a("h3",{attrs:{id:"求区间特性值-merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#求区间特性值-merge"}},[t._v("#")]),t._v(" 求区间特性值 merge")]),t._v(" "),a("p",[t._v("merge(left, right) 函数用于计算下标为 [ left, right ] 的闭区间的“区间特性值”，比如最小值。")]),t._v(" "),a("ul",[a("li",[t._v("注意：\n"),a("ul",[a("li",[t._v("通常来说，merge 操作需要做到常数时间复杂度，即 O(1)。")]),t._v(" "),a("li",[t._v("下文均以求区间最小值为例展开论述。")]),t._v(" "),a("li",[t._v("array 的长度 n 目前暂假定为 2 的自然数幂次，之后会讨论其他情况。")])])])]),t._v(" "),a("h3",{attrs:{id:"st-建立"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#st-建立"}},[t._v("#")]),t._v(" ST 建立")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("建树思路：")]),t._v(" "),a("ul",[a("li",[t._v("线段树的叶结点均为 array 数组中的各个值。")]),t._v(" "),a("li",[t._v("从叶结点开始，相邻两两结点 merge 出父结点的值，直至根结点。")])])]),t._v(" "),a("li",[a("p",[t._v("可以看出：")]),t._v(" "),a("ul",[a("li",[t._v("最终结点数目为 n + n/2 + n/4 + ... + 1 = 2n-1。")]),t._v(" "),a("li",[t._v("建树需对 array 扫描一遍，时间复杂度为 O(n)")])])])]),t._v(" "),a("p",[t._v("我们用一个长度为 2n 的大数组来存储所有结点值，其中下标较大的最末 n 个位置存放原 array 的值，作为叶结点值。")]),t._v(" "),a("p",[t._v("随后从后往前扫描，对叶结点两两分组，进行 merge 操作，计算出的值为其父结点的值，保存于下标为 (int)(left / 2) 的位置。")]),t._v(" "),a("ul",[a("li",[t._v("以 array = [1, 5, 3, 7] 为例：\n"),a("ul",[a("li",[t._v("构造大数组 st = [inf, inf, inf, inf, 1, 5, 3, 7]。其中 inf 为预设的数字最大值，因为目前假定 merge 是求区间最小值。")]),t._v(" "),a("li",[t._v("从后往前扫描，两两 merge：\n"),a("ul",[a("li",[t._v("[3, 7] -> 3: st = [inf, inf, inf, 3, 1, 5, 3, 7]")]),t._v(" "),a("li",[t._v("[1, 5] -> 1: st = [inf, inf, 1, 3, 1, 5, 3, 7]")]),t._v(" "),a("li",[t._v("[1, 3] -> 1: st = [inf, 1, 1, 3, 1, 5, 3, 7]")])])]),t._v(" "),a("li",[t._v("最终得到线段树（大数组）为 [inf, 1, 1, 3, 1, 5, 3, 7]，建树完毕。")])])])]),t._v(" "),a("p",[t._v("以 array = [1, 5, 3, 7, 3, 2, 5, 7] 为例：")]),t._v(" "),a("ol",[a("li",[t._v("初始 st 大数组：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/info_technology/algorithm/data_structure/segment-tree-0.png",alt:"segment-tree-0"}})]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("构造完毕的 st：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/info_technology/algorithm/data_structure/segment-tree-1.png",alt:"segment-tree-1"}})]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("st 各结点存储的区间信息如下：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/info_technology/algorithm/data_structure/segment-tree-2.png",alt:"segment-tree-2"}})]),t._v(" "),a("h3",{attrs:{id:"更新-update"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新-update"}},[t._v("#")]),t._v(" 更新 update")]),t._v(" "),a("p",[t._v("更新 array 的值时，修改叶结点的值，并逐级向上 merge。")]),t._v(" "),a("p",[t._v("因为树高为 O(log n)，因此 update 操作的时间复杂度为 O(log n)。")]),t._v(" "),a("p",[t._v("以 array = [1, 5, 3, 7, 3, 2, 5, 7] 为例，更新其 index=5 的值为 6，即操作 update(5, 6)：")]),t._v(" "),a("ol",[a("li",[t._v("先修改叶结点：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/info_technology/algorithm/data_structure/segment-tree-3.png",alt:"segment-tree-3"}})]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("再逐级向上更新：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/info_technology/algorithm/data_structure/segment-tree-4.png",alt:"segment-tree-4"}})]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("直至树根，更新完毕：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/info_technology/algorithm/data_structure/segment-tree-5.png",alt:"segment-tree-5"}})]),t._v(" "),a("h3",{attrs:{id:"查询-query"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询-query"}},[t._v("#")]),t._v(" 查询 query")]),t._v(" "),a("p",[t._v("查询某一区间 [ left, right ] 的“区间特性值”（比如最小值），执行操作 query(left, right)。")]),t._v(" "),a("p",[t._v("这里 [ left, right ] 为闭区间，变量取值范围为 0 <= left <= right <= n-1")]),t._v(" "),a("ul",[a("li",[t._v("从叶结点开始查询。查询时，有三种情况：\n"),a("ul",[a("li",[t._v("case 1. 当前结点所代表的区间完全位于 query 区间 [ left, right ] 之外（与闭区间无交集），则不应考虑当前结点。")]),t._v(" "),a("li",[t._v("case 2. 当前结点所代表的区间完全位于 query 区间 [ left, right ] 之内（含边界值）\n"),a("ul",[a("li",[t._v("case 2.1. 当前结点的父结点所代表的区间也完全位于 query 区间 [ left, right ] 之内（含边界值），则可以直接查询其父结点值，减少查询量。")]),t._v(" "),a("li",[t._v("case 2.2. 当前结点的父结点所代表的区间部分位于 query 区间 [ left, right ] 之内、部分在外，则分段考虑：先处理位于 query 区间外的部分；后处理位于 query 区间内的部分。")])])])])])]),t._v(" "),a("p",[t._v("以 array = [1, 5, 3, 7, 3, 2, 5, 7] 为例，查询区间 [ 1, 6 ] 的最小值 query(1, 6)：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/info_technology/algorithm/data_structure/segment-tree-6.png",alt:"segment-tree-6"}})]),t._v(" "),a("ul",[a("li",[t._v("分析：\n"),a("ul",[a("li",[t._v("从叶结点开始查询，下标为 0 和下标为 7 的叶结点都与 query 区间 [ 1, 6 ] 无交集，属于情况 1，排除之。")]),t._v(" "),a("li",[t._v("下标为 1 和下标为 6 的结点完全位于 query 区间 [ left, right ] 之内，属于情况 2。但是其父结点所代表的区间不完全位于 query 区间内，所以属于情况 2.2。")]),t._v(" "),a("li",[t._v("下标为 2 至下标为 5 的结点属于情况 2.1，因此只需观察其父结点即可。")])])])]),t._v(" "),a("p",[t._v("实现时，为了避免重复处理那些 query 区间外的、已被排除的值，可采用对撞指针、区间夹逼的思想。query 时间复杂度 O(log n)。")]),t._v(" "),a("p",[t._v("更多例子：以 update 后的 array = [1, 5, 3, 7, 3, 6, 5, 7] 为例，查询区间 [ 1, 6 ] 的最小值 query(1, 6)：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/info_technology/algorithm/data_structure/segment-tree-7.png",alt:"segment-tree-7"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/info_technology/algorithm/data_structure/segment-tree-8.png",alt:"segment-tree-8"}})]),t._v(" "),a("h3",{attrs:{id:"n-power-of-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#n-power-of-2"}},[t._v("#")]),t._v(" n != power of 2")]),t._v(" "),a("p",[t._v("若 array 长度 n 不为 2 的自然数幂次，树的结构看似比较乱，当前算法看似无法正常运行。")]),t._v(" "),a("p",[t._v("一个简单的考虑是将 array 填充 inf 直至某个 2 的自然数幂次，但这可能会带来很大的存储负担，增加了时空复杂度。")]),t._v(" "),a("p",[t._v("实际上，本算法能够处理"),a("strong",[t._v("任意正整数")]),t._v(" n 长度的 array，即便是奇数也没问题。")]),t._v(" "),a("p",[t._v("以 array = [4, 3, 9, 1, 6, 7] 为例：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/info_technology/algorithm/data_structure/segment-tree-9.png",alt:"segment-tree-9"}})]),t._v(" "),a("h2",{attrs:{id:"代码范例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码范例"}},[t._v("#")]),t._v(" 代码范例")]),t._v(" "),a("h3",{attrs:{id:"python"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python"}},[t._v("#")]),t._v(" Python")]),t._v(" "),a("p",[t._v("Python 环境：Python 3.7")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/env python")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding:utf-8 -*-")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""=================================================\n@Project : algorithm/data_structure\n@File    : segment-tree.py\n@Author  : YuweiYin\n@Date    : 2020-05-01\n=================================================="""')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sys\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" time\n\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n线段树 (Segment Tree, ST)\n"""')]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SegmentTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构造线段树，一棵完全二叉树（array 长度不为 2 的幂次也无妨）")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 时间复杂度 O(n)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 名为"树"，实则用 数组/list 存储中间结点的值')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# st 的长度为 2 * n，其中后 n 位为叶结点值，")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 除了第一个元素外的 前 n-1 位为中间结点值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr_len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x3f3f3f3f")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1061109567")]),t._v("\n\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr_len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" array\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("reversed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr_len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("merge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不同的需求可以设计不同的 merge 过程")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 时间复杂度 O(1)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@staticmethod")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("merge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对于保存区间最小值的线段树来说，merge 的过程应为 min() 函数，")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用以取得两个子区间中的最小区间最小值作为当前融合过后的区间的区间最小值")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更新数组值、更新树值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 时间复杂度 O(log n)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr_len\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n            self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("merge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 区间查询 [left, right) 左闭右开区间")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0 <= left <= right <= n")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 时间复杂度 O(log n)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从叶结点开始查询。查询时，有三种情况：")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   case 1. 当前结点所代表的区间完全位于 query 区间之外（与闭区间无交集），则不应考虑当前结点。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   case 2. 当前结点所代表的区间完全位于 query 区间之内（含边界值）")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     case 2.1. 当前结点的父结点所代表的区间也完全位于 query 区间之内（含边界值），")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#               则可以直接查询其父结点值，减少查询量。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     case 2.2. 当前结点的父结点所代表的区间部分位于 query 区间之内、部分在外，")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#               则分段考虑：先处理位于 query 区间外的部分；后处理位于 query 区间内的部分。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("minimum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 边界情况")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inf\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr_len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr_len\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 增加偏移量，定位到原始 array 数组位置")]),t._v("\n        left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr_len\n        right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr_len\n        minimum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inf\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 区间夹逼")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# left 为奇数表示该结点是其父结点的右孩子，")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 由于 left 左边的值都已经被处理/排除了，")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所以这个 left 结点是需要单独考虑、不能再考虑其父结点了")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理其值后将 left 指针右移")]),t._v("\n                minimum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("merge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("minimum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# right 为奇数同样表示该结点是其父结点的右孩子，")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 由于 query 区间的 right 为半开区间的边界，故不取其值")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这意味着 right 结点的左边一个结点需要单独考虑，不能考虑其父结点了")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 先将 right 指针左移，然后处理其值")]),t._v("\n                right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n                minimum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("merge"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("minimum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 left 和 right 上移一层（索引号除以 2）")]),t._v("\n            left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n            right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" minimum\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print_st")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# array = [1, 5, 3, 7, 3, 2, 5, 7]")]),t._v("\n    array "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# array 长度为奇数也没问题")]),t._v("\n\n    st "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SegmentTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("print_st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    ans "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("minimum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Running Time: %.5f ms'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    sys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=Oq2E2yGadnU",target:"_blank",rel:"noopener noreferrer"}},[t._v("Youtube - Efficient Segment Tree Tutorial"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://codeforces.com/blog/entry/18051",target:"_blank",rel:"noopener noreferrer"}},[t._v("CF Blog"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);