(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{352:function(e,r,v){"use strict";v.r(r);var t=v(28),a=Object(t.a)({},(function(){var e=this,r=e.$createElement,v=e._self._c||r;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"algorithm-data-structure"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#algorithm-data-structure"}},[e._v("#")]),e._v(" Algorithm - Data Structure")]),e._v(" "),v("p",[e._v("By "),v("a",{attrs:{href:"https://yuweiyin.github.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("YuweiYin"),v("OutboundLink")],1)]),e._v(" "),v("h2",{attrs:{id:"目录"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[e._v("#")]),e._v(" 目录")]),e._v(" "),v("ul",[v("li",[e._v("数组、链表、栈、队列")]),e._v(" "),v("li",[e._v("树形结构\n"),v("ul",[v("li",[e._v("二叉树及其各类遍历算法\n"),v("ul",[v("li",[e._v("前序遍历 Preorder Traversal")]),e._v(" "),v("li",[e._v("中序遍历 Inorder Traversal")]),e._v(" "),v("li",[e._v("后序遍历 Postorder Traversal")]),e._v(" "),v("li",[e._v("层序遍历 Level Traversal")])])]),e._v(" "),v("li",[v("a",{attrs:{href:"./binary-search-tree"}},[e._v("二叉排序/搜索树")]),e._v(" (Binary Sort/Search Tree, BST)")]),e._v(" "),v("li",[v("a",{attrs:{href:"./avl-tree"}},[e._v("平衡二叉搜索树")]),e._v(" AVL 树 (Adelson-Velsky-Landis Tree) (Balanced Binary Search Tree)")]),e._v(" "),v("li",[e._v("红黑树 (Red Black Tree, RBT)")]),e._v(" "),v("li",[e._v("伸展树 (Splay Tree)")]),e._v(" "),v("li",[e._v("堆树 (Treap)")]),e._v(" "),v("li",[e._v("B- 树、B+ 树、B* 树")]),e._v(" "),v("li",[e._v("跳表 Skip List")]),e._v(" "),v("li",[e._v("哈夫曼树 (Huffman Tree)")])])]),e._v(" "),v("li",[e._v("区间查询 Range Query\n"),v("ul",[v("li",[v("a",{attrs:{href:"./segment-tree"}},[e._v("线段树")]),e._v(" (Segment Tree, ST)")]),e._v(" "),v("li",[v("a",{attrs:{href:"./binary-indexed-tree"}},[e._v("树状数组")]),e._v(" Fenwick Tree (Binary Indexed Tree, BIT)")]),e._v(" "),v("li",[v("a",{attrs:{href:"./range-min-max-query"}},[e._v("区间最值查询")]),e._v(" Sparse Table (Range Minimum/Maximum Query, RMQ)")]),e._v(" "),v("li",[v("a",{attrs:{href:"./lowest-common-ancestor"}},[e._v("最近公共祖先")]),e._v(" (Lowest Common Ancestors, LCA)")])])]),e._v(" "),v("li",[e._v("哈希表、哈希数组、哈希桶")]),e._v(" "),v("li",[e._v("堆、优先队列\n"),v("ul",[v("li",[e._v("双端队列")]),e._v(" "),v("li",[e._v("可并堆")]),e._v(" "),v("li",[e._v("左偏堆")])])]),e._v(" "),v("li",[e._v("块状链表")]),e._v(" "),v("li",[e._v("基本图结构\n"),v("ul",[v("li",[e._v("邻接矩阵")]),e._v(" "),v("li",[e._v("邻接表")])])]),e._v(" "),v("li",[e._v("不相交集合 (Disjoint Set, DS) "),v("a",{attrs:{href:"./union-find"}},[e._v("并查集")]),e._v(" (Union Find)")]),e._v(" "),v("li",[e._v("字符串相关\n"),v("ul",[v("li",[e._v("前缀树/字典树 (Trie Tree)、01 字段树")]),e._v(" "),v("li",[e._v("后缀树、后缀数组")]),e._v(" "),v("li",[e._v("后缀自动机 (Suffix Automaton, SAM)")]),e._v(" "),v("li",[e._v("AC 自动机 (Aho-Corasick Automaton)")]),e._v(" "),v("li",[e._v("回文自动机 (Palindromic Automaton, PAM)")]),e._v(" "),v("li",[e._v("回文树 Palindromic Tree")]),e._v(" "),v("li",[e._v("KMP 算法 (D.E.Knuth，J.H.Morris and V.R.Pratt)")]),e._v(" "),v("li",[e._v("马拉车算法 Manacher's Algorithm")])])])])])}),[],!1,null,null,null);r.default=a.exports}}]);