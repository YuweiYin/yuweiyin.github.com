(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{314:function(t,n,s){"use strict";s.r(n);var a=s(28),_=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"algorithm-mathematics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#algorithm-mathematics"}},[t._v("#")]),t._v(" Algorithm - Mathematics")]),t._v(" "),s("ul",[s("li",[t._v("For source files, please refer to the "),s("a",{attrs:{href:"https://github.com/YuweiYin/Algorithm_YuweiYin",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub Repository"),s("OutboundLink")],1),t._v(". (I'd be happy to see more people like this project and give "),s("strong",[t._v("Star")]),t._v(".)")])]),t._v(" "),s("p",[s("strong",[t._v("Probability Statistics")])]),t._v(" "),s("h2",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"./hiring"}},[t._v("雇用问题")])])]),t._v(" "),s("h2",{attrs:{id:"概率分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概率分析"}},[t._v("#")]),t._v(" 概率分析")]),t._v(" "),s("p",[s("strong",[t._v("概率分析")]),t._v("是在问题分析中应用概率论的理念。大多数情况下，采用概率分析来分析一个算法的运行时间，有时也用它来分析其它量，例如"),s("a",{attrs:{href:"./hiring"}},[t._v("雇用问题")]),t._v("中的雇用费用。")]),t._v(" "),s("p",[t._v("为了进行概率分析，必须使用或者假设关于"),s("strong",[t._v("输入的分布")]),t._v("，计算出一个平均情形下的运行时间，其中对所有可能的输入分布取平均值。实际上，往往是对所有可能输入产生的运行时间取平均，这样分析出的运行时间被称为"),s("strong",[t._v("平均情况运行时间")]),t._v("。")]),t._v(" "),s("p",[t._v("对于某些问题，可以对所有可能的输入集合做某种分布的假定，然后采用概率分析来设计一个高效的算法。但对于某些问题，无法对输入分布做出一个合理的假设，此时就不能采用概率分析。")]),t._v(" "),s("h2",{attrs:{id:"随机算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#随机算法"}},[t._v("#")]),t._v(" 随机算法")]),t._v(" "),s("p",[t._v("为了利用概率分析，需要了解关于输入分布的一些信息。在许多情况下，我们对输入分布了解甚少。而且即便知道输入分布的信息，也可能无法从计算上对该分布知识建立模型（若真要利用分布信息，往往需要对分布进行精细的采样工作）。然而，可以通过使一个算法中"),s("strong",[t._v("某部分")]),t._v("的行为"),s("strong",[t._v("随机")]),t._v("，就能利用"),s("strong",[t._v("概率和随机性")]),t._v("作为算法设计和分析的工具。")]),t._v(" "),s("p",[t._v("可以通过"),s("strong",[t._v("随机数生成器")]),t._v(" (Random-Number Generator) 产生的数值来为算法中的行为增添随机性，并且称这样的算法是"),s("strong",[t._v("随机的")]),t._v(" (randomized)。在实践中，大多数编程环境会提供一个"),s("strong",[t._v("伪随机数生成器")]),t._v("，它是一个确定性算法，返回值在统计上看起来是随机的。")]),t._v(" "),s("p",[t._v("而且，往往伪随机数生成器都可以手动设置"),s("strong",[t._v("随机数种子")]),t._v(" (random seed)。相同的随机数种子，产生的随机数序列是相同的，但是不同的随机数种子 则可以引导不同的随机数序列。因此如果能手动、"),s("strong",[t._v("真正随机")]),t._v("地设置随机数种子，则可以产生真正的无法预料的随机数。这种真正随机的种子一般可以选择"),s("strong",[t._v("当前时间戳")]),t._v("，或者是当前处理对象/指针的"),s("strong",[t._v("唯一标志符")]),t._v(" id 等。")]),t._v(" "),s("p",[t._v("当分析一个随机算法的运行时间时，我们以运行时间的期望值衡量，其中输入值由随机数生成器产生。将一个随机算法的运行时间称为"),s("strong",[t._v("期望运行时间")]),t._v("，以此来区分这类算法和那些输入是随机的算法。一般而言，当概率分布是在算法的输入上时，讨论的是平均情况运行时间；当算法本身的行为作出随机选择时，讨论其期望运行时间。")]),t._v(" "),s("h3",{attrs:{id:"随机打乱数组-代码示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#随机打乱数组-代码示例"}},[t._v("#")]),t._v(" 随机打乱数组-代码示例")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 随机打乱数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ShuffleArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("do_shuffle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isinstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从最高的 index 开始降到 1，每次生成 0～index-1 的随机数，与 index=index 的元素交换")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("reversed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_exchange"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_get_random_int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The so-called array is NOT a list!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 按下标生成随机数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_get_random_int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 以对象的唯一标识符 id 作为随机数种子")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" random"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("randint"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成 0～index 的整型随机数")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 按下标交换 self.array 中的两个元素")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_exchange")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp\n")])])]),s("h2",{attrs:{id:"指示器随机变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#指示器随机变量"}},[t._v("#")]),t._v(" 指示器随机变量")]),t._v(" "),s("p",[t._v("为了分析随机算法，常采用"),s("strong",[t._v("指示器随机变量")]),t._v(" (Indicator Random Variable)。它为概率与期望之间的转换提供了一个便利的方法。给定一个样本空间 S 和一个事件 A，那么事件 A 对应的"),s("strong",[t._v("指示器随机变量 I{A}")]),t._v(" 定义为如下分段常数函数：")]),t._v(" "),s("ul",[s("li",[t._v("如果事件 A 发生，则 I{A} = 1")]),t._v(" "),s("li",[t._v("如果事件 A 不发生，则 I{A} = 0")])]),t._v(" "),s("p",[t._v("《CLRS》"),s("strong",[t._v("引理 5.1")]),t._v("：定义一个样本空间 S 和 S 中的一个事件 A，设随机变量 XA = I{A}，那么 E[XA] = Pr{A}。")]),t._v(" "),s("p",[s("strong",[t._v("证明")]),t._v("：E[XA] = E[I{A}] = 1 * Pr{A} + 0 * Pr{not A} = Pr{A}")]),t._v(" "),s("p",[t._v("指示器随机变量往往将计数、求和 与概率值联系起来，方便了概率分析。")]),t._v(" "),s("h2",{attrs:{id:"生日悖论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生日悖论"}},[t._v("#")]),t._v(" 生日悖论")]),t._v(" "),s("p",[s("strong",[t._v("问题描述")]),t._v("：一个屋子里的人数必须要达到多少人，才能使其中两人生日相同的机会达到 50%？")]),t._v(" "),s("p",[t._v("该问题有许多重要的应用，比如 "),s("strong",[t._v("Hash 哈希/散列")]),t._v("。散列表的大小 可以视作“生日的数目”，散列表中的散列值 可以视作“屋子里的人数”，两个不同关键字的散列值相同（哈希冲突）可以视作“两人生日相同”。")]),t._v(" "),s("p",[t._v("之所以被称为“悖论”，是因为这个问题的答案的是一个很小的数值，远少于一年天数的一半。但实际上并不是数学上传统的“悖论”概念。")]),t._v(" "),s("h3",{attrs:{id:"生日悖论-概率分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生日悖论-概率分析"}},[t._v("#")]),t._v(" 生日悖论 - 概率分析")]),t._v(" "),s("p",[t._v("对此问题进行分析，用自然数 1, 2, ..., k 对屋子里的人进行编号，其中 k 是屋子里的总人数。另外，不考虑闰年，一年按 365 天计算。对于 i = 1, 2, ..., k，设 bi 表示编号为 i 的人的生日，其中 1 <= bi <= n。还假设生日均匀分布在一年的 n 天中，因此对 i = 1, 2, ..., k 和 r = 1, 2, ..., n 有 Pr{bi = r} = 1/n")]),t._v(" "),s("p",[t._v("两个人 i 和 j 的生日正好相同的概率依赖于生日的随机选择是否"),s("strong",[t._v("独立")]),t._v("。假设生日是独立的，于是 i 和 j 的生日都落在同一日 r 上的概率是：")]),t._v(" "),s("p",[t._v("$$Pr{bi = r and bj = r} = Pr{bi = r} * Pr{bj = r} = 1 / n^2$$")]),t._v(" "),s("p",[t._v("因此，他们的生日落在同一天的概率是：")]),t._v(" "),s("p",[t._v("$$Pr{bi = bj} = \\sum_{r=1}^{n} Pr{bi = r and bj = r} = \\sum_{r=1}^{n} (1 / n^2) = 1/n$$")]),t._v(" "),s("p",[t._v("这意味着，一旦选定 bi，那么 bj 被选在同一天的概率是 1/n。因此 i 和 j 有相同的生日的概率 与他们其中一个的生日落在给定的某天的概率相同。注意：这个“巧合”依赖于各人的生日是独立的这个假设。")]),t._v(" "),s("p",[t._v("即事件 Bk 为 k 个人中"),s("strong",[t._v("至少有两人")]),t._v("生日相同的概率，考虑时间 Bk 的补事件 not Bk，并且记事件 Ai 为：对所有 j < i，i 与 j 的生日均不同。于是有：")]),t._v(" "),s("p",[t._v("$$Bk = \\Cap_{i=1}^{k} Ai$$")]),t._v(" "),s("p",[t._v("既然可以写成 $Bk = Ak \\cap B_{k-1}$，由条件概率公式有 $Pr{Bk} = Pr{B_{k-1}} * Pr{Ak | B_{k-1}}$")]),t._v(" "),s("p",[t._v("其中取 Pr{B1} = Pr{A1} = 1 为初始条件。")]),t._v(" "),s("p",[t._v("如果 B1, B2, ..., B_{k-1} 两两不同，对于 i = 1, 2, ..., k-1，Bk != Bi 的条件概率是 $Pr{Ak | B_{k-1}} = (n-k+1)/n$，这是因为 n 天中有 n-(k-1) 没被占用。反复应用递归式 $Bk = Ak \\cap B_{k-1}$ 可得：")]),t._v(" "),s("p",[t._v("$$Pr{Bk} = 1 · (1 - 1/n) · (1 - 2/n) ··· (1 - (k-1)/n)$$")]),t._v(" "),s("p",[t._v("再由不等式 1 + x <= e^x 得：")]),t._v(" "),s("p",[t._v("$$Pr{Bk} <= e^{-1/n} · e^{-2/n} ··· e^{-(k-1)/n} = e^{-k(k-1)/2n} <= 1/2$$")]),t._v(" "),s("p",[t._v("当 -k(k-1)/2n <= ln (1/2) 时成立，即 当 k(k-1) >= 2n ln 2 时成立。解此二次方程，得 $k >= (1 + \\sqrt(1 + (8 ln 2) n)) / 2$，"),s("strong",[t._v("取 n = 365 时，则有 k >= 23")]),t._v("。")]),t._v(" "),s("p",[t._v("因而，如果至少有 23 个人在一间屋子里，那么至少有两个人生日相同的概率至少是 1/2。类似地，在火星上 一年有 669 个火星日，所以达到相同的效果须有 31 个火星人在同一间屋子里。")]),t._v(" "),s("h3",{attrs:{id:"生日悖论-指示器随机变量分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生日悖论-指示器随机变量分析"}},[t._v("#")]),t._v(" 生日悖论 - 指示器随机变量分析")]),t._v(" "),s("p",[t._v("可以用指示器随机变量给出生日悖论的一个简单而近似的分析。对屋子里 k 个人中的每一对 (i, j)，对 1 <= i < j <= k，定义指示器随机变量 Xij = I{i 和 j 生日相同}：")]),t._v(" "),s("ul",[s("li",[t._v("如果 i 和 j 生日相同，则 Xij = 1")]),t._v(" "),s("li",[t._v("如果 i 和 j 生日不同，则 Xij = 0")])]),t._v(" "),s("p",[t._v("根据概率分析，两个人生日相同的概率是 1/n，故有：")]),t._v(" "),s("p",[t._v("$$E[Xij] = Pr{i 和 j 生日相同} = 1/n$$")]),t._v(" "),s("p",[t._v("设 X 表示计数生日相同的 (i, j) 数目的随机变量，因此有：")]),t._v(" "),s("p",[t._v("$$X = \\sum_{i=1}^{k} \\sum_{j=i+1}^{k} Xij$$")]),t._v(" "),s("p",[t._v("两边取期望，并应用期望的线性性质，有（其中 $C_{k}^{2}$ 为组合数）：")]),t._v(" "),s("p",[t._v("$$E[X] = \\sum_{i=1}^{k} \\sum_{j=i+1}^{k} E[Xij] = C_{k}^{2} (1/n) = k(k-1)/2n$$")]),t._v(" "),s("p",[t._v("因此，当 k(k-1)/2n 时，生日相同的两人对的期望数至少是 1。因此，若屋子里至少有 1 + $\\sqrt(2n)$ 个人时，可以期望至少有两人生日相同。"),s("strong",[t._v("对于 n = 365，若 k = 28")]),t._v("，生日相同人对数目的期望值为 (28 * 27) / (2 * 365) ~= 1.0356。因此，如果至少有 28 人，可以期望找到至少一对人生日相同。在火星上，一年有 669 个火星日，至少需要 38 个火星人。")]),t._v(" "),s("ul",[s("li",[t._v("概率分析时，确定了为使存在至少一对人生日相同概率大于 1/2 所需的人数 23；")]),t._v(" "),s("li",[t._v("指示器随机变量分析时，给出了相同生日期望数为 1 时的人数 28。")])]),t._v(" "),s("p",[t._v("虽然两种情形下的人的准确数目吗不同，但他们在渐近阶数上是相等的，都为 $\\Theta(\\sqrt(n))$。")]),t._v(" "),s("h2",{attrs:{id:"球与箱子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#球与箱子"}},[t._v("#")]),t._v(" 球与箱子")]),t._v(" "),s("p",[s("strong",[t._v("问题描述")]),t._v("：把相同的球随机投到 b 个箱子里，箱子编号为 1, 2, ..., b。每次投球都是独立的，每一次投球，球等可能（概率 1/b）地落在某一个箱子中。因此，投球过程是一组伯努利试验，每次成功（成功是指球落入指定的箱子中）的概率是 1/b。")]),t._v(" "),s("ul",[s("li",[t._v("那么，有多少球落在给定的箱子里？\n"),s("ul",[s("li",[t._v("落在给定箱子里的球数服从"),s("strong",[t._v("二项分布")]),t._v(" b(k; n, 1/b)")]),t._v(" "),s("li",[t._v("如果投 n 个球，落在给定箱子里的球数期望值是 n/b")])])]),t._v(" "),s("li",[t._v("在平均意义下，必须要投多少个球，才能在给定的箱子里投中一个球？\n"),s("ul",[s("li",[t._v("直至给定箱子收到一个的投球次数服从"),s("strong",[t._v("几何分布")]),t._v("，成功概率为 1/b")]),t._v(" "),s("li",[t._v("为使成功，投球次数期望是 1/(1/b) = b")])])])]),t._v(" "),s("p",[t._v("另外还有个 "),s("strong",[t._v("礼券收集者问题")]),t._v("：")]),t._v(" "),s("p",[t._v("需要投多少次球，才能使每个箱子里都至少有一个球？一次投球落在空箱子里称为一次“命中”那么为了获得 b 次命中，所需的投球次数期望（记为 n）是多少？")]),t._v(" "),s("p",[t._v("把 n 次投球分为几个阶段，第 i 个阶段包括从第 i - 1 次命中到第 i 次命中之间的投球。第 1 阶段包含第 1 次投球，因为我们可以保证一次命中，此时所有的箱子都是空的。对第 i 阶段的每一次投球，有 i - 1 个箱子有球，而 b - i + 1 个箱子是空的。因而，对第 i 阶段的每次投球，得到一次命中的概率是 (b-i+1)/b。")]),t._v(" "),s("p",[t._v("设 ni 表示第 i 阶段的投球次数，所以为得到 b 次命中所需的总投球次数 $n = \\sum_{i=1}^{b} ni$。每个随机变量 ni 服从几何分布，成功的概率是 (b-i+1)/b，所以有 $E[ni] = b/(b-i+1)$")]),t._v(" "),s("p",[t._v("根据期望的线性性质，有 $E[n] = \\sum_{i=1}^{b} b/(b-i+1) = b \\sum_{i=1}^{b} (1/i)$，得 b(ln b + O(1))。所以，在期望每个箱子里都有一个球之前，大约要投 (b ln b) 次。")]),t._v(" "),s("p",[t._v("这个问题之所以被称为 "),s("strong",[t._v("礼券收集者问题")]),t._v("，意思是一个人如果想要收集齐 b 种不同礼券中的每一种，大约需要 (b ln b) 张随机得到的礼券才能成功。")]),t._v(" "),s("p",[t._v("这个模型对分析 "),s("strong",[t._v("Hash 哈希/散列")]),t._v(" 也特别有用，可以把散列表的大小视作该问题里的箱子，而对关键字的散列操作可以视作投球过程。")]),t._v(" "),s("h2",{attrs:{id:"特征序列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特征序列"}},[t._v("#")]),t._v(" 特征序列")]),t._v(" "),s("p",[t._v("假设抛掷一枚标准的（正反面形状、质量相等）的硬币 n 次，最长连续正面的序列的期望长度有多长？答案是 $\\Theta(log_{2} n)$。")]),t._v(" "),s("p",[t._v("首先证明最长连续正面的特征序列的长度期望是 O(log_{2} n)。每次抛硬币时是一次正面的概率为 1/2。")]),t._v(" "),s("p",[t._v("设事件 Aik 为：长度至少为 k 的正面特征序列开始于第 i 次抛掷。即：第 i, i+1, ..., i+k-1 次得到的都是正面。假设每次抛硬币是互相独立的。因此 对任何给定事件 Aik，所有 k 次抛掷都是正面的概率是 Pr{Aik} = 1 / 2^k")]),t._v(" "),s("p",[t._v("对于 "),s("code",[t._v("k = 2 \\ceil(log n)")]),t._v("，其中 ceil 表示上取整，有 $Pr{Aik} = 1 / 2^k <= 1 / 2^{2 log_{2} n} = 1 / n^2$")]),t._v(" "),s("p",[t._v("因此，长度至少为 "),s("code",[t._v("2 \\ceil(log n)")]),t._v("、起始于位置 i 的一个正面特征序列的概率是很小的。这种序列起始位置至多有 "),s("code",[t._v("n - 2 \\ceil(log n) + 1")]),t._v(" 个。所以长度至少为 "),s("code",[t._v("2 \\ceil(log n)")]),t._v(" 的正面特征序列起始于任一位置的概率如下。（根据"),s("strong",[t._v("布尔不等式")]),t._v("，一组"),s("strong",[t._v("事件并集")]),t._v("的概率"),s("strong",[t._v("至多")]),t._v("是各个事件的"),s("strong",[t._v("概率之和")]),t._v("。即便这些事件不独立，布尔不等式依然成立）")]),t._v(" "),s("p",[t._v("$$Pr{\\Cup_{i=1}^{n+1 - 2 \\ceil(log_{2} n)}} < \\sum_{i=1}^{n} (1 / n^2) = 1/n$$")]),t._v(" "),s("p",[t._v("现在给出最长特征序列的长度界。对于 j = 0, 1, 2, ..., n，令 Lj 表示事件：最长连续正面的特征序列长度正好是 j。并设最长特征序列的长度是 L。根据期望的定义，有：")]),t._v(" "),s("p",[t._v("$$E[L] = \\sum_{j=0}^{n} (j Pr{Lj})$$")]),t._v(" "),s("p",[t._v("由于对于 j = 0, 1, 2, ..., n，事件 Lj 之间是不相交的，因此长度至少为 "),s("code",[t._v("2 \\ceil(log n)")]),t._v(" 的连续正面特征序列起始于任一位置的概率为 $\\sum_{j = 2 \\ceil(log n)}^{n} (j Pr{Lj}) < 1/n$。另外，注意到 $\\sum_{j=0}^{n} Pr{Lj} = 1$，因此有：")]),t._v(" "),s("p",[t._v("$$E[L] = \\sum_{j=0}^{n} (j Pr{Lj}) < O(log n)$$")]),t._v(" "),s("p",[t._v("这表明正面特征序列长度超过 "),s("code",[t._v("r \\ceil(log n)")]),t._v(" 次抛掷的概率随着 r 变小而很快地减少。对 r >= 1，正面特征序列长度至少为 "),s("code",[t._v("r \\ceil(log n)")]),t._v(" 且起始于位置 i 的概率是：")]),t._v(" "),s("p",[t._v("$$Pr{A_{i, r \\ceil(log n)} = 1 / (2^{r \\ceil(log n)}) <= 1 / n^r$$")]),t._v(" "),s("p",[t._v("因此，最长特征序列长度至少为 "),s("code",[t._v("r \\ceil(log n)")]),t._v(" 的概率至多是 n / n^r = 1 / n^{r-1}。也即是说，最长特征序列长度小于 "),s("code",[t._v("r \\ceil(log n)")]),t._v(" 的概率至少是 1 - (1 / n^{r-1})。")]),t._v(" "),s("p",[t._v("例如，抛掷 n = 1000 次硬币，最少出现 "),s("code",[t._v("2 \\ceil(log n) = 20")]),t._v(" 次连续正面的几率至多是 1/n = 1/1000。长度超过 "),s("code",[t._v("3 \\ceil(log n) = 30")]),t._v(" 次连续正面特征序列的几率至多是 1 / n^2 = 1 / 1000000。")]),t._v(" "),s("p",[t._v("类似地，可以证明下界：在 n 次硬币抛掷中，最长的正面特征序列的长度期望为 $\\Omega(log_{2} n)$。")]),t._v(" "),s("p",[t._v("因此有结论：最长特征序列的长度期望是紧确界 $\\Theta(log_{2} n)$。")])])}),[],!1,null,null,null);n.default=_.exports}}]);