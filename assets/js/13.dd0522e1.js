(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{435:function(t,s,a){"use strict";a.r(s);var n=a(28),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"algorithm-data-structure-binary-indexed-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#algorithm-data-structure-binary-indexed-tree"}},[t._v("#")]),t._v(" Algorithm - Data Structure - Binary Indexed Tree")]),t._v(" "),a("p",[t._v("Create Date: 2020.05.02")]),t._v(" "),a("p",[t._v("Last Update Date: 2020.05.02")]),t._v(" "),a("p",[t._v("By "),a("a",{attrs:{href:"https://yuweiyin.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("YuweiYin"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),a("p",[t._v("树状数组 Fenwick Tree (Binary Indexed Tree, BIT)")]),t._v(" "),a("h2",{attrs:{id:"场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[t._v("#")]),t._v(" 场景")]),t._v(" "),a("p",[t._v("场景与 "),a("a",{attrs:{href:"./segment-tree"}},[t._v("线段树")]),t._v(" (Segment Tree, ST) 相似，BIT 常用作于区间求和。")]),t._v(" "),a("ul",[a("li",[t._v("array：依下标 index 连续存储的"),a("strong",[t._v("数值")]),t._v("数组/列表")]),t._v(" "),a("li",[t._v("add(index, value)：把 array 中下标为 index 的元素值 增长 value")]),t._v(" "),a("li",[t._v("sum(num)：计算前缀和（前 num 个元素值的和）")]),t._v(" "),a("li",[t._v("range_sum(from, to)：求闭区间 [ from, to ] 中元素值的和")])]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("ol",[a("li",[t._v("array 中存储的也可以不是数值，而是某种结构体，但是该结构体一定要两两可以比较序关系（"),a("strong",[t._v("全序")]),t._v("关系）")]),t._v(" "),a("li",[t._v("add 和 sum 操作可以有"),a("strong",[t._v("很多次")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"场景分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景分析"}},[t._v("#")]),t._v(" 场景分析")]),t._v(" "),a("h3",{attrs:{id:"数组-列表结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组-列表结构"}},[t._v("#")]),t._v(" 数组/列表结构")]),t._v(" "),a("p",[t._v("如果直接用 array 数组进行操作，那么 add 操作的时间复杂度为 O(1)，sum 操作的时间复杂度为 O(n)，其中 n 为 array 的长度。")]),t._v(" "),a("p",[t._v("设有 a 次 add、s 次 sum，则整体时间复杂度为 O(a + sn)")]),t._v(" "),a("h3",{attrs:{id:"前缀和数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前缀和数组"}},[t._v("#")]),t._v(" 前缀和数组")]),t._v(" "),a("p",[t._v("如果使用一个与 array 等长的数组 pre_array 来存储前缀和，那么构造 pre_array 的时间复杂度为 O(n)。")]),t._v(" "),a("p",[t._v("在 pre_array 上操作并对其进行维护，add 操作的时间复杂度为 O(n)，sum 操作的时间复杂度为 O(1)。")]),t._v(" "),a("p",[t._v("比如：如果修改了第一个元素的值，那么整个 pre_array 的值都要改变。")]),t._v(" "),a("p",[t._v("设有 a 次 add、s 次 sum，则整体时间复杂度为 O(an + s)")]),t._v(" "),a("h3",{attrs:{id:"树状数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树状数组"}},[t._v("#")]),t._v(" 树状数组")]),t._v(" "),a("p",[t._v("对前述两种方式进行折中：要存储并维护前缀和数组，但要换成层级树状结构，树高为 O(log n)。")]),t._v(" "),a("p",[t._v("进行 add 和 sum 操作时，只要操作/维护路径长度不超过树高，那么整体的时间复杂度就会降低，均为 O(log n)。")]),t._v(" "),a("p",[t._v("设有 a 次 add、s 次 sum，则整体时间复杂度为 O(a log n + s log n) = O((a + s) log n)")]),t._v(" "),a("p",[t._v("但是，与线段树类似，一旦 array 长度变化，线状数组 BIT 就需要重建了，每次重建的时间复杂度为 O(n log n)，也可以优化为 O(n)。")]),t._v(" "),a("p",[t._v("因此，在 n 值较大（数组较长）、且数组长度不频繁变动的情况下，线状数组对区间求和 sum 操作效率的提升效果显著。")]),t._v(" "),a("h2",{attrs:{id:"设计-细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计-细节"}},[t._v("#")]),t._v(" 设计 & 细节")]),t._v(" "),a("h3",{attrs:{id:"bit-建立"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bit-建立"}},[t._v("#")]),t._v(" BIT 建立")]),t._v(" "),a("p",[t._v("以 array = [1, 7, 3, 0, 5, 8, 3, 2, 6, 2, 1, 1, 4, 5] 为例。分析时假定数组首位 index 为 1。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/info_technology/algorithm/data_structure/bit-1.png",alt:"bit-1"}})]),t._v(" "),a("p",[t._v("BIT 建立过程：")]),t._v(" "),a("ul",[a("li",[t._v("设置一个与 array 等长的前缀和数组 pre_array，其值均为空。")]),t._v(" "),a("li",[t._v("第一轮扫描（tree layer 1），从 index=1 首元素开始：\n"),a("ul",[a("li",[t._v("index = 1 - 1 + 2^0 = 1 的位置，记录闭区间 [ 1, 1 ] 的前缀和 1")]),t._v(" "),a("li",[t._v("index = 1 - 1 + 2^1 = 2 的位置，记录闭区间 [ 1, 2 ] 的前缀和 8")]),t._v(" "),a("li",[t._v("index = 1 - 1 + 2^2 = 4 的位置，记录闭区间 [ 1, 4 ] 的前缀和 11")]),t._v(" "),a("li",[t._v("index = 1 - 1 + 2^3 = 8 的位置，记录闭区间 [ 1, 8 ] 的前缀和 29")]),t._v(" "),a("li",[t._v("index = 1 - 1 + 2^4 = 16 大于数组长度 14，跳到下一轮扫描")])])]),t._v(" "),a("li",[t._v("第二轮扫描（tree layer 2），从 pre_array 中非空的第一个元素 index=3 开始：\n"),a("ul",[a("li",[t._v("index = 3 - 1 + 2^0 = 3 的位置，记录闭区间 [ 3, 3 ] 的前缀和 3")]),t._v(" "),a("li",[t._v("index = 3 - 1 + 2^1 = 4 的位置，pre_array 在该位置已经有值了，找往后找首个非空元素 index=5")]),t._v(" "),a("li",[t._v("index = 5 - 1 + 2^0 = 5 的位置，记录闭区间 [ 5, 5 ] 的前缀和 5")]),t._v(" "),a("li",[t._v("index = 5 - 1 + 2^1 = 6 的位置，记录闭区间 [ 5, 6 ] 的前缀和 13")]),t._v(" "),a("li",[t._v("index = 5 - 1 + 2^2 = 8 的位置，pre_array 在该位置已经有值了，找往后找首个非空元素 index=9")]),t._v(" "),a("li",[t._v("index = 9 - 1 + 2^0 = 9 的位置，记录闭区间 [ 9, 9 ] 的前缀和 6")]),t._v(" "),a("li",[t._v("index = 9 - 1 + 2^1 = 10 的位置，记录闭区间 [ 9, 10 ] 的前缀和 8")]),t._v(" "),a("li",[t._v("index = 9 - 1 + 2^2 = 12 的位置，记录闭区间 [ 9, 12 ] 的前缀和 10")]),t._v(" "),a("li",[t._v("index = 9 - 1 + 2^3 = 16 大于数组长度 14，跳到下一轮扫描")])])]),t._v(" "),a("li",[t._v("第三轮扫描（tree layer 3），从 pre_array 中非空的第一个元素 index=7 开始：\n"),a("ul",[a("li",[t._v("index = 7 - 1 + 2^0 = 7 的位置，记录闭区间 [ 7, 7 ] 的前缀和 3")]),t._v(" "),a("li",[t._v("index = 7 - 1 + 2^1 = 8 的位置，pre_array 在该位置已经有值了，找往后找首个非空元素 index=11")]),t._v(" "),a("li",[t._v("index = 11 - 1 + 2^0 = 11 的位置，记录闭区间 [ 11, 11 ] 的前缀和 1")]),t._v(" "),a("li",[t._v("index = 11 - 1 + 2^1 = 12 的位置，pre_array 在该位置已经有值了，找往后找首个非空元素 index=13")]),t._v(" "),a("li",[t._v("index = 13 - 1 + 2^0 = 13 的位置，记录闭区间 [ 13, 13 ] 的前缀和 4")]),t._v(" "),a("li",[t._v("index = 13 - 1 + 2^1 = 14 的位置，记录闭区间 [ 13, 14 ] 的前缀和 9")]),t._v(" "),a("li",[t._v("index = 13 - 1 + 2^2 = 16 大于数组长度 14，跳到下一轮扫描")])])]),t._v(" "),a("li",[t._v("第四轮扫描，发现 pre_array 已经写满了，pre_array（即 BIT）构造结束。")])]),t._v(" "),a("p",[t._v("但是多轮扫描的比较复杂，因此通常设置一个值全为 0 的 pre_array，从左至右地使用 add 操作来完成 BIT 的建立。")]),t._v(" "),a("p",[t._v("建立 BIT 的时间复杂度为 O(n log n)。")]),t._v(" "),a("h3",{attrs:{id:"元素增值-add"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素增值-add"}},[t._v("#")]),t._v(" 元素增值 add")]),t._v(" "),a("p",[t._v("以 array = [1, 7, 3, 0, 5, 8, 3, 2, 6, 2, 1, 1, 4, 5] 为例。将 index=5 的元素值增加 2：add(5, 2)。")]),t._v(" "),a("p",[t._v("需要将 pre_array 中所有包含了 index=5 元素的前缀和结点均增加 2。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/info_technology/algorithm/data_structure/bit-2.png",alt:"bit-2"}})]),t._v(" "),a("p",[t._v("下标改为二进制值：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/info_technology/algorithm/data_structure/bit-3.png",alt:"bit-3"}})]),t._v(" "),a("ul",[a("li",[t._v("观察：0x0101 +2^0 = 0x0110, 0x0110 +2^1 = 0x1000")]),t._v(" "),a("li",[t._v("发现：每次将最末的 1 进位。")]),t._v(" "),a("li",[t._v("实现："),a("code",[t._v("index += index & (-index)")]),t._v(" "),a("ul",[a("li",[t._v("注："),a("code",[t._v("index & (-index)")]),t._v(" 又常被称为 "),a("strong",[t._v("lowbit")]),t._v("(index) 函数")])])])]),t._v(" "),a("p",[a("strong",[t._v("注意")]),t._v("：如果 add(index, value) 的 value 参数为"),a("strong",[t._v("负数")]),t._v("，则可实现"),a("strong",[t._v("减值")]),t._v("操作。")]),t._v(" "),a("h3",{attrs:{id:"区间求和-sum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区间求和-sum"}},[t._v("#")]),t._v(" 区间求和 sum")]),t._v(" "),a("p",[t._v("以 array = [ 1, 7, 3, 0, 5, 8, 3, 2, 6, 2, 1, 1, 4, 5 ] 为例。求前 13 个元素值的和 sum(13)。")]),t._v(" "),a("p",[t._v("拆分 sum(13) = range_sum(1, 8) + range_sum(9, 12) + range_sum(13, 13) = 29 + 10 + 4 = 43")]),t._v(" "),a("p",[t._v("根据 BIT 的构造，闭区间 [ 1, 8 ]、[ 9, 12 ]、[ 13, 13 ] 是一定可以直接索引到的，其索引下标在 pre_array 中分别为 8、12、13。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/info_technology/algorithm/data_structure/bit-4.png",alt:"bit-4"}})]),t._v(" "),a("ul",[a("li",[t._v("如何快速获得这几个索引下标呢？观察二进制表示：\n"),a("ul",[a("li",[t._v("13 = 2^3 + 2^2 + 2^0 = 0x1101 为输入 sum 的参数值")]),t._v(" "),a("li",[t._v("12 = 2^3 + 2^2 = 0x1100 为 0x1101 最末的 1 清零")]),t._v(" "),a("li",[t._v("8 = 2^3 = 0x1000 为 0x1100 最末的 1 清零")]),t._v(" "),a("li",[t._v("结束标志 0 = 0x1000 为 0x1000 最末的 1 清零")]),t._v(" "),a("li",[t._v("实现："),a("code",[t._v("index -= index & (-index)")])])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/info_technology/algorithm/data_structure/bit-5.png",alt:"bit-5"}})]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度分析：\n"),a("ul",[a("li",[t._v("角度一：代表这三个闭区间的结点分别位于“树”的第 1、2、3 层，操作路径长度不超过树高。")]),t._v(" "),a("li",[t._v("角度二：拆解 13 为二进制表示，检验次数即为二进制位数 (int)(log 13)。")]),t._v(" "),a("li",[t._v("因此 sum 操作的时间复杂度为 O(log n)。")])])])]),t._v(" "),a("p",[t._v("BIT 与快速幂算法有异曲同工之妙。")]),t._v(" "),a("h3",{attrs:{id:"其它实现细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其它实现细节"}},[t._v("#")]),t._v(" 其它实现细节")]),t._v(" "),a("ul",[a("li",[t._v("使用"),a("strong",[t._v("长度为 n+1")]),t._v(" 的 pre_array 作为 BIT\n"),a("ul",[a("li",[t._v("首位为 0 仅作占位，不影响求和结果")]),t._v(" "),a("li",[t._v("方便 sum 操作的循环结束判断：num 减到 0 就停止")])])]),t._v(" "),a("li",[t._v("建立 BIT：\n"),a("ul",[a("li",[t._v("O(n log n)：以全 0 数组开始，用 add 操作建立 BIT")])])]),t._v(" "),a("li",[t._v("求任意区间和 "),a("code",[t._v("range_sum(from, to) = sum(to) - sum(from - 1)")]),t._v(" 时间复杂度仍然为 O(log n)")])]),t._v(" "),a("h2",{attrs:{id:"代码范例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码范例"}},[t._v("#")]),t._v(" 代码范例")]),t._v(" "),a("h3",{attrs:{id:"python"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python"}},[t._v("#")]),t._v(" Python")]),t._v(" "),a("p",[t._v("Python 环境：Python 3.7")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/env python")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding:utf-8 -*-")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""=================================================\n@Project : algorithm/data_structure\n@File    : binary-indexed-tree.py\n@Author  : YuweiYin\n@Date    : 2020-05-02\n=================================================="""')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sys\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" time\n\n"),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n树状数组 Fenwick Tree (Binary Indexed Tree, BIT)\n"""')]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BinaryIndexedTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 Add 操作构造线状数组，时间复杂度 O(n log n)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bit_len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 首位为 0 仅作占位，不影响求和值，让实际值从下标 1 开始")]),t._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bit_len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 把 array 中下标为 index 的元素值 增长 value，并维护 BIT，时间复杂度 O(log n)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对应 BIT 数组，直接影响的是 self.bit 中下标为 index + 1 的元素")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bit_len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# BIT 首位为 0 仅作占位，需绕过")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bit_len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" value\n                index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 求前 num 个元素值的和，时间复杂度 O(log n)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 边界情况")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bit_len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bit_len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n        res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# num 到 0 则终止循环")]),t._v("\n            res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n            num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 求闭区间 [from, to] 中元素值的和，时间复杂度 O(log n)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 序号从 1 开始")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("range_sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" from_index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" to_index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 边界情况")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" from_index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" to_index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" from_index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            from_index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" to_index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bit_len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            to_index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bit_len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 返回前 to 项和与前 from - 1 项和之差，即为闭区间 [from, to] 之总和")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("to_index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("from_index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("print_bit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    array "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    bit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BinaryIndexedTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("print_bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [0, 1, 8, 3, 11, 5, 13, 3, 29, 6, 8, 1, 10, 4, 9]")]),t._v("\n\n    start "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    ans "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bit.sum(13):'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 48")]),t._v("\n\n    bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("print_bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [0, 21, 28, 3, 31, 5, 13, 3, 49, 6, 8, 1, 10, 4, 9]")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bit.sum(13):'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 63")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bit.range_sum(0, 13):'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("range_sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 63")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bit.range_sum(1, 13):'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("range_sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 63")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bit.range_sum(2, 13):'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("range_sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 42")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bit.range_sum(3, 13):'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("range_sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 35")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bit.range_sum(-1, 18):'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" bit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("range_sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 68")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Running Time: %.5f ms'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    sys"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=v_wj_mOAlig",target:"_blank",rel:"noopener noreferrer"}},[t._v("Youtube - Tutorial: Binary Indexed Tree (Fenwick Tree)"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);