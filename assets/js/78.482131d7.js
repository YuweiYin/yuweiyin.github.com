(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{324:function(t,o,r){"use strict";r.r(o);var a=r(28),n=Object(a.a)({},(function(){var t=this,o=t.$createElement,r=t._self._c||o;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"algorithm-polynomial-fft"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#algorithm-polynomial-fft"}},[t._v("#")]),t._v(" Algorithm - Polynomial & FFT")]),t._v(" "),r("ul",[r("li",[t._v("For source files, please refer to the "),r("a",{attrs:{href:"https://github.com/YuweiYin/Algorithm_YuweiYin",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub Repository"),r("OutboundLink")],1),t._v(". (I'd be happy to see more people like this project and give "),r("strong",[t._v("Star")]),t._v(".)")])]),t._v(" "),r("h2",{attrs:{id:"目录"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"./fft"}},[t._v("多项式与快速傅立叶变换")]),t._v(" Polynomial & FFT\n"),r("ul",[r("li",[t._v("离散傅立叶变换 (Discrete Fourier Transform, DFT)")]),t._v(" "),r("li",[t._v("快速傅立叶变换 (Fast Fourier Transform, FFT)")])])])]),t._v(" "),r("h2",{attrs:{id:"多项式与快速傅立叶变换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多项式与快速傅立叶变换"}},[t._v("#")]),t._v(" 多项式与快速傅立叶变换")]),t._v(" "),r("p",[t._v("两个 n 次多项式相加的最直接方法所需的时间为 $ \\Theta(n) $，但相乘的最直接方法所需的时间为 $ \\Theta(n^2) $。而"),r("strong",[t._v("快速傅立叶变换")]),t._v(" (Fast Fourier Transform, FFT) 可以将多项式相乘的时间复杂度降低为 $ \\Theta(n log n) $。")]),t._v(" "),r("p",[t._v("傅立叶变换的最常见用途是信号处理，这也是 FFT 的最常见用途。信号通常在"),r("strong",[t._v("时间域")]),t._v("中给出：一个把时间映射到振幅的函数。傅里叶分析允许将时间域上的信号表示成"),r("strong",[t._v("不同频率的相移正弦曲线的加权叠加")]),t._v("。和频率相关的权重和相位在"),r("strong",[t._v("频率域")]),t._v("中刻画出信号的特征。")]),t._v(" "),r("p",[t._v("FFT 有很多日程应用，如压缩技术，可用于编码数字视频和音频信息，包括 MP3 文件等。")]),t._v(" "),r("h2",{attrs:{id:"多项式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多项式"}},[t._v("#")]),t._v(" 多项式")]),t._v(" "),r("p",[t._v("一个以 x 为变量的"),r("strong",[t._v("多项式")]),t._v("定义在一个代数域 F (Field) 上，将函数 A(x) 表示为形式和：$ A(x) = \\sum_{j=0}^{n-1} a_{j} x^{j} $")]),t._v(" "),r("p",[t._v("称 $ a_{0}, a_{1}, ..., a_{n-1} $ 为如上多项式的"),r("strong",[t._v("系数")]),t._v("，所有系数都属于域 F，典型的情形是复数集合 C (Complex)。")]),t._v(" "),r("p",[t._v("如果一个多项式 A(x) 的"),r("strong",[t._v("最高次的非零系数")]),t._v("是 $ a_{k} $，则称 A(x) 的"),r("strong",[t._v("次数")]),t._v("是 k，记为 degree(A) = k。任何严格大于一个多项式次数的整数都是该多项式的"),r("strong",[t._v("次数界")]),t._v("，因此对于次数界为 n 的多项式，其次数可以是 0～n-1 之间的任何整数（包括 0 和 n-1）。")]),t._v(" "),r("p",[t._v("在多项式上可以定义很多不同的运算。对于"),r("strong",[t._v("多项式加法")]),t._v("，如果 A(x) 和 B(x) 都是次数界为 n 的多项式，那么他们的"),r("strong",[t._v("和")]),t._v("也是一个次数界为 n 的多项式，记为 C(x)。对所有属于定义域的 x（这里的定义域是 A 和 B 的定义域的交集），都有 C(x) = A(x) + B(x)。")]),t._v(" "),r("p",[t._v("对于"),r("strong",[t._v("多项式乘法")]),t._v("，如果 A(x) 和 B(x) 都是次数界为 n 的多项式，则它们的"),r("strong",[t._v("乘积")]),t._v(" C(x) 是一个次数界为 2n-1 的多项式，对所有属于定义域的 x（这里的定义域是 A 和 B 的定义域的交集），都有 C(x) = A(x)·B(x)。")]),t._v(" "),r("p",[t._v("多项式乘法最简单直接的做法，就是类似于数字乘法、逐位相乘的"),r("strong",[t._v("竖式乘法")]),t._v("，如下例子：")]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/info-technology/algorithm/other-topics/polynomial-fft/fft-1.png",alt:"fft-1"}})]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/info-technology/algorithm/other-topics/polynomial-fft/fft-2.png",alt:"fft-2"}})]),t._v(" "),r("h2",{attrs:{id:"多项式的表示"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多项式的表示"}},[t._v("#")]),t._v(" 多项式的表示")]),t._v(" "),r("p",[t._v("在没有特殊说明的情况下，本章节使用符号(字母) i 来表达虚数单位 $ \\sqrt{-1} $。")]),t._v(" "),r("p",[t._v("从某种意义上，多项式的"),r("strong",[t._v("系数表达")]),t._v("与"),r("strong",[t._v("点值表达")]),t._v("是等价的，即用点值形式表示的多项式都对应唯一系数形式的多项式。而两种表达方式结合起来、互相转换，就能够使得两个次数界为 n 的多项式乘法运算在 $ \\Theta(n log n) $ 时间内完成。")]),t._v(" "),r("h3",{attrs:{id:"系数表达"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#系数表达"}},[t._v("#")]),t._v(" 系数表达")]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/info-technology/algorithm/other-topics/polynomial-fft/fft-3.png",alt:"fft-3"}})]),t._v(" "),r("h3",{attrs:{id:"点值表达"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#点值表达"}},[t._v("#")]),t._v(" 点值表达")]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/info-technology/algorithm/other-topics/polynomial-fft/fft-4.png",alt:"fft-4"}})]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/info-technology/algorithm/other-topics/polynomial-fft/fft-5.png",alt:"fft-5"}})]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/info-technology/algorithm/other-topics/polynomial-fft/fft-6.png",alt:"fft-6"}})]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/info-technology/algorithm/other-topics/polynomial-fft/fft-7.png",alt:"fft-7"}})]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/info-technology/algorithm/other-topics/polynomial-fft/fft-8.png",alt:"fft-8"}})]),t._v(" "),r("h3",{attrs:{id:"系数形式表示的多项式快速乘法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#系数形式表示的多项式快速乘法"}},[t._v("#")]),t._v(" 系数形式表示的多项式快速乘法")]),t._v(" "),r("p",[t._v("为了利用基于点值形式表达的多项式的线性时间乘法算法，来加速基于系数形式表达的多项式乘法，关键在于：能否快速地把一个多项式从系数形式转换为点值形式（"),r("strong",[t._v("求值")]),t._v("），以及从点值形式转换为系数形式（"),r("strong",[t._v("插值")]),t._v("）。")]),t._v(" "),r("p",[t._v("可以采用任何点作为求值点，但通过"),r("strong",[t._v("精心地挑选求值点")]),t._v("，可以把两种表示之间转换所需的时间复杂度降到 $ \\Theta(n log n) $。所谓的“精心挑选”，即选择“"),r("strong",[t._v("单位复数根")]),t._v("”作为求值点。通过对系数向量进行"),r("strong",[t._v("离散傅立叶变换")]),t._v(" (Discrete Fourier Transform, DFT)，得到相应的点值表达。然后对点值对执行"),r("strong",[t._v("逆 DFT")]),t._v("变换，从而获得相应的系数向量，这样就实现了求值运算的逆运算——插值。快速傅立叶算法 FFT 就是使用上述策略，在 $ \\Theta(n log n) $ 完成 DFT 和逆 DFT 运算，从而快速实现多项式乘法。")]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/info-technology/algorithm/other-topics/polynomial-fft/fft-9.png",alt:"fft-9"}})]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/info-technology/algorithm/other-topics/polynomial-fft/fft-10.png",alt:"fft-10"}})]),t._v(" "),r("h2",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),r("ul",[r("li",[t._v("Introduction to Algorithm (aka CLRS) Third Edition - Chapter 30")])])])}),[],!1,null,null,null);o.default=n.exports}}]);