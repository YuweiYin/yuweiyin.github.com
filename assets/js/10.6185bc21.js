(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{366:function(_,v,n){"use strict";n.r(v);var t=n(28),a=Object(t.a)({},(function(){var _=this,v=_.$createElement,n=_._self._c||v;return n("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[n("h1",{attrs:{id:"algorithm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#algorithm"}},[_._v("#")]),_._v(" Algorithm")]),_._v(" "),n("p",[_._v("此系列文章为算法编程相关文章")]),_._v(" "),n("p",[_._v("By "),n("a",{attrs:{href:"https://yuweiyin.github.io/",target:"_blank",rel:"noopener noreferrer"}},[_._v("YuweiYin"),n("OutboundLink")],1)]),_._v(" "),n("h2",{attrs:{id:"目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[_._v("#")]),_._v(" 目录")]),_._v(" "),n("ul",[n("li",[n("RouterLink",{attrs:{to:"/article/info-technology/algorithm/data-structure/"}},[_._v("数据结构 Data Structure")])],1),_._v(" "),n("li",[n("RouterLink",{attrs:{to:"/article/info-technology/algorithm/sort/"}},[_._v("排序 Sort")])],1),_._v(" "),n("li",[n("RouterLink",{attrs:{to:"/article/info-technology/algorithm/divide-conquer/"}},[_._v("分治法 Divide & Conquer")])],1),_._v(" "),n("li",[n("RouterLink",{attrs:{to:"/article/info-technology/algorithm/dynamic-programming/"}},[_._v("动态规划 Dynamic Programming")])],1),_._v(" "),n("li",[n("RouterLink",{attrs:{to:"/article/info-technology/algorithm/greedy-algorithm/"}},[_._v("贪心算法 Greedy Algorithm")])],1),_._v(" "),n("li",[n("RouterLink",{attrs:{to:"/article/info-technology/algorithm/graph-theory/"}},[_._v("图论 Graph Theory")])],1),_._v(" "),n("li",[n("RouterLink",{attrs:{to:"/article/info-technology/algorithm/mathematics/"}},[_._v("数学 Mathematics")])],1),_._v(" "),n("li",[n("RouterLink",{attrs:{to:"/article/info-technology/algorithm/other-topics/"}},[_._v("其它主题 Other Topics")])],1)]),_._v(" "),n("h2",{attrs:{id:"_1-算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-算法"}},[_._v("#")]),_._v(" 1. 算法")]),_._v(" "),n("p",[_._v("非形式地说，"),n("strong",[_._v("算法")]),_._v(" (algorithm) 就是任何良定义的计算过程，该过程取某个值或值的集合作为"),n("strong",[_._v("输入")]),_._v("并产生某个值或值的集合作为"),n("strong",[_._v("输出")]),_._v("。这样算法就是把输入转换成输出的计算步骤的一个序列。")]),_._v(" "),n("p",[_._v("也可以把算法看成是用于求解良说明的"),n("strong",[_._v("计算问题")]),_._v("的工具。一般来说，问题陈述说明了期望的输入/输出关系，算法则描述一个特定的计算过程来实现该输入/输出关系。")]),_._v(" "),n("p",[_._v("解决同一个问题，也会有很多算法可供使用。在实际应用中，算法的选择往往要考虑多个方面。以排序算法为例，对于给定的应用，哪个排序算法更好依赖于以下因素：待排序的数据项数、这些项已被部分排序的程序、关于项值的可能限制、计算机的体系结构，以及将使用的存储设备的种类（主存、磁盘、固态硬盘、磁带...）。")]),_._v(" "),n("p",[_._v("若某算法对每个输入实例都以正确的输出"),n("strong",[_._v("停机")]),_._v("，则称该算法"),n("strong",[_._v("正确的")]),_._v("。不正确的算法对某些输入实例可能以不正确的输出停机，也可能根本不停机。不过有时候，对某些不正确的算法而言，只要其错误率是可控的或者极小的，那么此算法可能也是有用的。")]),_._v(" "),n("p",[_._v("算法可以用自然语言或伪代码表达，也可以写成计算机程序，甚至可以用硬件设计来说明。唯一的要求是这个说明必须精确描述所要遵循的计算过程。")]),_._v(" "),n("h3",{attrs:{id:"_1-1-算法的正确性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-算法的正确性"}},[_._v("#")]),_._v(" 1.1. 算法的正确性")]),_._v(" "),n("p",[_._v("通常用"),n("strong",[_._v("循环不变式")]),_._v("来证明算法的"),n("strong",[_._v("正确性")]),_._v("。它类似于数学归纳法：")]),_._v(" "),n("ol",[n("li",[_._v("初始：首先给出一种数据的性质，称为"),n("strong",[_._v("不变式")]),_._v("，该性质应对输入数据适用。")]),_._v(" "),n("li",[_._v("保持：然后证明每一段（循环迭代 or 递归调用）算法过程仍然能够维持此不变式性质。")]),_._v(" "),n("li",[_._v("终止：最后证明在此算法结束时，确实能够获得预期输出。")])]),_._v(" "),n("p",[_._v("对于简单清晰的算法，正确性的判断是比较显然而容易的。但是对于复杂精巧的算法，往往需要拆开成好几个部分，利用循环不变式严格地证明各个部分的正确性，以及整体算法的正确性。")]),_._v(" "),n("h3",{attrs:{id:"_1-2-算法的效率"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-算法的效率"}},[_._v("#")]),_._v(" 1.2. 算法的效率")]),_._v(" "),n("p",[_._v("计算机也许是快的，但不是无限快的；存储器也许是廉价的，但不是免费的。所以计算时间是一种有限资源，存储器中的空间也一样。开发者应该明智地使用、权衡这些资源，设计时间或空间方面有效的算法。")]),_._v(" "),n("h3",{attrs:{id:"_1-3-算法的分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-算法的分析"}},[_._v("#")]),_._v(" 1.3. 算法的分析")]),_._v(" "),n("p",[_._v("分析算法的结果意味着预测算法需要的资源。虽然有时候主要关心内存、通信带宽或计算机硬件这类资源，但通常真正想度量的是总计算时间。通过分析求解某个问题的几种候选算法，通常可以选出一种/一些最有效的算法。")]),_._v(" "),n("p",[_._v("在能够分析一个算法之前，必须要有一个实现技术的计算模型，包括描述所用的资源及其代价的模型。在分析设计时，通常假定一种通用的单处理器计算模型——随机访问机 (Random-Access Machine, RAM)，算法可以用计算机程序来实现。在 RAM 模型中，指令一条接一条（根据程序计数器 PC）地执行，没有并发操作，也不考虑并行计算（现代计算机 CPU 往往是多核 Multi-Core）和分布式计算。")]),_._v(" "),n("p",[_._v("对存储空间进行分析时，往往不考虑高速缓存 cache（现代计算机往往至少有两级高速缓存 L1 cache、L2 cache）和虚拟内存（可以视作为主存与外存之间的缓存）。")]),_._v(" "),n("p",[_._v("因此，对算法的时间、空间效率的理论分析往往是在一个比价高的抽象层次。而在具体实现时，一个算法是否真的在实际运行时比另一个算法好，是要看具体情况的。但理论分析具有指导意义。")]),_._v(" "),n("p",[_._v("算法的"),n("strong",[_._v("输入规模")]),_._v("这个概念依赖于研究的问题。对许多问题，如排序或计算离散傅立叶变换，自然是用"),n("em",[_._v("输入中的项数")]),_._v("来度量输入规模，例如待排序数组中的数据量 n。对于其它许多问题，如两个整数相乘，输入规模的最佳度量是用二进制记号表示输入的所需的总位数。有时，用两个数而不是一个数来描述输入规模可能更合适：例如，若某个算法的输入是一个图结构，则输入规模可以用该图中的顶点数 V 和边数 E 来描述。")]),_._v(" "),n("p",[_._v("一个算法在特定的输入上的"),n("strong",[_._v("运行时间")]),_._v("是指执行的"),n("strong",[_._v("基本操作数")]),_._v("或步数。对“步”的概念通常做如下假定：执行每行伪代码需要常量时间。当然，如果某一行是调用某个子过程，那么耗费的就不一定是常数时间了。但定义“步”的概念就是为了独立于机器，所以通常站在更高的抽象层次来看待。如果要细究具体的机器执行时间，则需要考虑算法程序对应的机器指令，以及本机的时钟周期等方面。")]),_._v(" "),n("h3",{attrs:{id:"_1-4-最坏情况与平均情况分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-最坏情况与平均情况分析"}},[_._v("#")]),_._v(" 1.4. 最坏情况与平均情况分析")]),_._v(" "),n("p",[_._v("最坏情况运行时间，即对规模为 n 的任何输入，算法的最长运行时间。分析最坏情况往往有如下意义：")]),_._v(" "),n("ul",[n("li",[_._v("一个算法的最坏情况运行时间给出了任何输入的运行时间的一个上界。")]),_._v(" "),n("li",[_._v("对某些算法，最坏情况经常出现。例如，当在数据库中检索一条特定的信息时，若该信息未存储在数据库中，则检索算法往往会出现最坏情况。在某些应用中，对缺失信息的检索可能是频繁的。")]),_._v(" "),n("li",[_._v("“平均情况”往往与最坏情况大致一样差（渐近时间复杂度相同）。而且有时候难以确定什么样的情况才是此算法的平均情况。")])]),_._v(" "),n("p",[_._v("另外，可以使用"),n("strong",[_._v("概率分析")]),_._v("技术来分析算法的运行时间。平均情况分析的范围有限，因为对于特定问题，什么构成一种“平均”输入并不明显。为了进行分析，常常假定给定规模的所有输入具有相同的可能性出现。实际上，该假设可能不成立，但有时可以使用随机化算法，该算法做出一些随机的选择，以允许进行概率分析并产生某个"),n("strong",[_._v("期望")]),_._v("的运行时间。")]),_._v(" "),n("h3",{attrs:{id:"_1-5-增长量级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-增长量级"}},[_._v("#")]),_._v(" 1.5. 增长量级")]),_._v(" "),n("p",[_._v("一般来说，真正感兴趣的是运行时间的"),n("strong",[_._v("增长率")]),_._v("或"),n("strong",[_._v("增长量级")]),_._v("，因此我们主要考虑的是运行时间公式 T(n) 中 (关于输入规模 n) 最高阶的项。例如 n^2 > n log n > n > log n > log log n。注意：在计算机算法的分析时，若无特别说明，log 或者 lg 往往表示以 2 为底的对数 log_{2}。")]),_._v(" "),n("p",[_._v("如果一个算法的最坏情况运行时间具有比另一个算法更低的增长量级，则通常认为前者比后者更有效率。")]),_._v(" "),n("h2",{attrs:{id:"_2-函数的增长"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数的增长"}},[_._v("#")]),_._v(" 2. 函数的增长")]),_._v(" "),n("p",[_._v("前述算法的运行时间增长量级简单地刻画了算法效率，一旦输入规模 n 变得足够大，最坏运行时间 T(n) 中最高阶为 n log n 的算法总能战胜最高阶为 n^2 的算法。虽然有时可以确定 T(n) 中的低阶项以及最高阶项的常数系数，但对于足够大的输入，这些量会被输入规模本身的影响所支配。")]),_._v(" "),n("p",[_._v("当输入规模足够大，使得只有运行时间的增长量级有关时，对算法效率的研究就主要是研究其"),n("strong",[_._v("渐近效率")]),_._v("。即：关心当输入规模"),n("strong",[_._v("无限增加")]),_._v("时，在"),n("strong",[_._v("极限")]),_._v("情况下，算法的运行时间如何随着输入规模的变大而增加。以微积分的观点看来，由于(通常)算法的运行时间不会是负数，所以 T(n) 都是"),n("strong",[_._v("无穷大量")]),_._v("，而相对"),n("strong",[_._v("更低阶")]),_._v("的无穷大量 是拥有"),n("strong",[_._v("更高效率")]),_._v("的算法。")]),_._v(" "),n("h3",{attrs:{id:"_2-1-渐近记号"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-渐近记号"}},[_._v("#")]),_._v(" 2.1. 渐近记号")]),_._v(" "),n("p",[_._v("由于数据的输入规模 n 往往是一个自然数，因此用来描述算法渐近运行时间的记号是根据定义域为自然数集 N = {0, 1, 2, ...} 的函数来定义的。渐近记号除去了算法运行时间函数的某些细节（低阶项、最高阶项的系数）。")]),_._v(" "),n("p",[_._v("$ \\Theta $ 、O、o、$ \\Omega $、$ \\omega $ 记号，分别表达"),n("strong",[_._v("渐近紧确界")]),_._v(" (Asymptotically Tight Bound)、渐近上界、非紧确渐近上界、渐近下界、非紧确渐近下界。")]),_._v(" "),n("ul",[n("li",[_._v("$ \\Theta(g(n)) $ = { f(n): 存在某正常数 c1, c2 和 n0，使得对所有的 n >= n0，有 0 <= c1 g(n) <= f(n) <= c2 g(n) }")]),_._v(" "),n("li",[_._v("O(g(n)) = { f(n): 存在某正常数 c 和 n0，使得对所有的 n >= n0，有 0 <= f(n) <= c g(n) }")]),_._v(" "),n("li",[_._v("o(g(n)) = { f(n): 存在某正常数 c 和 n0，使得对所有的 n >= n0，有 0 <= f(n) < c g(n) }")]),_._v(" "),n("li",[_._v("$ \\Omega(g(n)) $ = { f(n): 存在某正常数 c1 和 n0，使得对所有的 n >= n0，有 0 <= c g(n) <= f(n) }")]),_._v(" "),n("li",[_._v("$ \\omega(g(n)) $ = { f(n): 存在某正常数 c1 和 n0，使得对所有的 n >= n0，有 0 <= c g(n) < f(n) }")])]),_._v(" "),n("p",[n("img",{attrs:{src:"/img/info-technology/algorithm/alg-0.png",alt:"alg-0"}})]),_._v(" "),n("p",[_._v("可分别类比于相等关系和偏序关系的符号：=、<=、<、>=、>。因此各种渐近符号的性质也很显然了（下面假定 f(n) 和 g(n) 均渐近为正）：")]),_._v(" "),n("p",[n("strong",[_._v("传递性")])]),_._v(" "),n("ul",[n("li",[_._v("f(n) = $ \\Theta(g(n)) $ 且 g(n) = $ \\Theta(h(n)) $ 蕴含 f(n) = $ \\Theta(h(n)) $")]),_._v(" "),n("li",[_._v("f(n) = O(g(n)) 且 g(n) = O(h(n)) 蕴含 f(n) = O(h(n))")]),_._v(" "),n("li",[_._v("f(n) = o(g(n)) 且 g(n) = o(h(n)) 蕴含 f(n) = o(h(n))")]),_._v(" "),n("li",[_._v("f(n) = $ \\Omega(g(n)) $ 且 g(n) = $ \\Omega(h(n)) $ 蕴含 f(n) = $ \\Omega(h(n)) $")]),_._v(" "),n("li",[_._v("f(n) = $ \\omega(g(n)) $ 且 g(n) = $ \\omega(h(n)) $ 蕴含 f(n) = $ \\omega(h(n)) $")])]),_._v(" "),n("p",[n("strong",[_._v("自反性")])]),_._v(" "),n("ul",[n("li",[_._v("f(n) = $ \\Theta(f(n)) $")]),_._v(" "),n("li",[_._v("f(n) = O(f(n))")]),_._v(" "),n("li",[_._v("f(n) = $ \\Omega(f(n)) $")])]),_._v(" "),n("p",[n("strong",[_._v("对称性")])]),_._v(" "),n("ul",[n("li",[_._v("f(n) = $ \\Theta(g(n)) $ 当且仅当 g(n) = $ \\Theta(f(n)) $")])]),_._v(" "),n("p",[n("strong",[_._v("转置对称性")])]),_._v(" "),n("ul",[n("li",[_._v("f(n) = O(g(n)) 当且仅当 g(n) = $ \\Omega(f(n)) $")]),_._v(" "),n("li",[_._v("f(n) = o(g(n)) 当且仅当 g(n) = $ \\omega(f(n)) $")])]),_._v(" "),n("p",[n("strong",[_._v("三歧性")])]),_._v(" "),n("p",[_._v("对任意两个实数 a 和 b，下列三种情况"),n("strong",[_._v("恰有")]),_._v(" (有且仅有) 一种成立：a < b; a = b; a > b。")]),_._v(" "),n("p",[_._v("虽然任意两个实数都可以进行比较（实数上的序关系是全序关系），但不是所有函数都可以渐近比较。即：对两个函数 f(n) 和 g(n) 而言，可能 f(n) = O(g(n)) 和 f(n) = $ \\Omega(g(n)) $ 均不成立。")]),_._v(" "),n("p",[_._v("例如，不能用渐近记号来比较函数 f(n) = n 和 g(n) = n^(1 + sin(n))，因为 g(n) 中的幂值在 0 与 2 之间摆动、取介于两者之间的所有值。不过，好在一般很少遇到这种特殊的运行时间表达式。T(n) 一般都是多项式函数与对数函数的组合，偶尔会出现指数函数和阶乘函数（此二者往往导致算法运行时间随输入规模的增长而剧烈增长，应尽量避免）。")]),_._v(" "),n("p",[_._v("正整数 n 的阶乘可以根据 斯特林公式 (Stirling's Approximation) 来近似：")]),_._v(" "),n("p",[_._v("$$ n! = \\sqrt{(2n \\pi)} (n/e)^{n} (1 + 1/O(n)) $$")]),_._v(" "),n("h2",{attrs:{id:"_3-递归式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-递归式"}},[_._v("#")]),_._v(" 3. 递归式")]),_._v(" "),n("p",[_._v("对含有递归结构的算法进行运行时间分析时，常使用"),n("strong",[_._v("递归式")]),_._v("来表达问题。")]),_._v(" "),n("p",[_._v("例如，归并排序的每次将当前数据规模 k 的问题分解为 2 个数据规模为 k/2 的子问题，并耗费 $ \\Theta(k) $ 的时候将子问题的结果合并起来。因此归并排序的递归式为 $ T(k) = 2 T(k/2) + \\Theta(k) $。顶层调用为输入规模 k=n。")]),_._v(" "),n("p",[_._v("求解递归式一般有三种方式：代入法、递归树、主方法。")]),_._v(" "),n("h3",{attrs:{id:"_3-1-代入法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-代入法"}},[_._v("#")]),_._v(" 3.1. 代入法")]),_._v(" "),n("p",[_._v("基于经验和数学直觉，对于比较简单的递归式形式可以采用代入法，步骤如下：")]),_._v(" "),n("ol",[n("li",[_._v("猜测解的形式，存在待定系数")]),_._v(" "),n("li",[_._v("用数据归纳法求解出待定系数，并证明解是正确的。\n"),n("ul",[n("li",[_._v("注意：归纳假设要足够严格，覆盖所有可能的情况，否则可能是错误的证明。")])])])]),_._v(" "),n("h3",{attrs:{id:"_3-2-递归树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-递归树"}},[_._v("#")]),_._v(" 3.2. 递归树")]),_._v(" "),n("p",[_._v("如果算法含有递归结构，则往往可以将其"),n("strong",[_._v("递归树")]),_._v("表达出来，每次递归调用则产生一个孩子结点。")]),_._v(" "),n("p",[_._v("将树每层子过程（一个结点一个子过程）的运行时间加和起来，便能得到总运行时间 T(n)。")]),_._v(" "),n("p",[n("img",{attrs:{src:"/img/info-technology/algorithm/alg-1.png",alt:"alg-1"}})]),_._v(" "),n("p",[_._v("一般来说，加和后的式子会比较凌乱，此时可以利用渐近符号的“不精确性”，用一些放缩法（比如利用某无限递减的几何级数作为上界）来整理原式，得到一个"),n("strong",[_._v("猜测")]),_._v(" T(n)。此时再利用代入法，验证此 T(n) 的正确性。")]),_._v(" "),n("p",[_._v("原式是紧确界，而经过放缩法整理的式子可能会导致 T(n) 的渐近界发生变化（当然，这是不希望出现的），因此整理后的式子只能被称作是猜测，需要代入法来验证。")]),_._v(" "),n("h3",{attrs:{id:"_3-3-主方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-主方法"}},[_._v("#")]),_._v(" 3.3. 主方法")]),_._v(" "),n("p",[n("strong",[_._v("主定理")]),_._v("：令 a >= 1 和 b > 1 是常数，f(n) 是一个渐近为正的函数，T(n) 是定义域为自然数集的递归式：")]),_._v(" "),n("p",[_._v("$$ T(n) = a T(n/b) + f(n) $$")]),_._v(" "),n("p",[_._v("这里将 n/b 解释为上取整 "),n("code",[_._v("\\ceil(n/b)")]),_._v(" 或下取整 "),n("code",[_._v("\\floor(n/b)")]),_._v("。则 T(n) 有如下渐近界：")]),_._v(" "),n("ol",[n("li",[_._v("若对某个常数 $ \\epsilon > 0 $，有 $ f(n) = O(n^{(log_{b} a) - \\epsilon}) $，则 $ T(n) = \\Theta(n^{log_{b} a}) $")]),_._v(" "),n("li",[_._v("若 $ f(n) = \\Theta(n^{log_{b} a}) $，则 $ T(n) = \\Theta(n^{log_{b} a} log n) $")]),_._v(" "),n("li",[_._v("若对某个常数 $ \\epsilon > 0 $，有 $ f(n) = \\Omega(n^{(log_{b} a) + \\epsilon}) $，且对某个常数 c < 1 和所有足够大的 n 有 $ a f(n/b) <= c f(n) $，则 $ T(n) = \\Theta(f(n)) $")])]),_._v(" "),n("p",[n("strong",[_._v("解释")]),_._v("：对于三种情况的每一种，将函数 f(n) 与函数 $ g(n) = n^{log_{b} a} $ 进行比较，两大函数的较大者决定了递归式的解。")]),_._v(" "),n("ul",[n("li",[_._v("对于情况 1，g(n) 渐近较大，则解为 $ T(n) = \\Theta(g(n)) $")]),_._v(" "),n("li",[_._v("对于情况 2，两者渐近相等，则在 g(n) 的基础上乘以一个对数因子，解为 $ T(n) = \\Theta(g(n) log n) $")]),_._v(" "),n("li",[_._v("对于情况 3，f(n) 渐近较大，则解为 $ T(n) = \\Theta(f(n)) $")])]),_._v(" "),n("p",[n("strong",[_._v("注意")]),_._v("：这三种情况并没有把所有可能出现的 case 都覆盖，存在一些“间隙”，使得主定理无法适用。")]),_._v(" "),n("ul",[n("li",[_._v("情况 1 和情况 2 之间有间隙：f(n) 可能小于 g(n)，但不是渐近小于 g(n)。")]),_._v(" "),n("li",[_._v("情况 2 和情况 3 之间有间隙：f(n) 可能大于 g(n)，但不是渐近大于 g(n)。")]),_._v(" "),n("li",[_._v("如果函数 f(n) 落在上述两种间隙中，或者情况 3 中要求的正则条件不满足，就不能用主定理来解递归式。")])]),_._v(" "),n("p",[n("strong",[_._v("应用举例")])]),_._v(" "),n("p",[_._v("对归并排序的递归式 $ T(n) = 2 T(n/2) + \\Theta(n) $ 应用主定理。a = 2、b = 2、$ f(n) = \\Theta(n) $，因此 $ g(n) = n^{log_{b} a} = n^{log_{2} 2} = n $。所以 f(n) 渐近等于 g(n)，属于情况 2，得到递归式的解为 $ T(n) = \\Theta(g(n) log n) = \\Theta(n log n) $。")]),_._v(" "),n("h2",{attrs:{id:"_4-数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-数据结构"}},[_._v("#")]),_._v(" 4. 数据结构")]),_._v(" "),n("p",[n("strong",[_._v("数据结构")]),_._v("是一种存储和组织数据的方式，旨在便于"),n("strong",[_._v("访问")]),_._v("和"),n("strong",[_._v("修改")]),_._v("数据。没有哪一种数据结构是万能的，所以重要的是理解各个结构的本质、清楚其优势和局限所在。")]),_._v(" "),n("p",[n("strong",[_._v("集合")]),_._v("作为计算机科学的基础，就如同它们在数学中所起的作用。数学中的集合往往是不变的，而由算法操作的集合却在整个过程中能增大、缩小或发生其它变化，这样的集合常被称为"),n("strong",[_._v("动态集合")]),_._v("。")]),_._v(" "),n("p",[_._v("不同的算法可能需要对集合执行不同的操作。例如，许多算法只需要能在一个集合中插入和删除元素，以及测试元素是否属于集合。支持这些操作的动态集合称为"),n("strong",[_._v("字典")]),_._v(" (dictionary)。其它一些算法需要更复杂的操作，例如用堆数据结构实现的最小(最大)优先队列，它支持(高效地)向集合插入一个元素和取出一个最小元素的操作。实现动态集合关键取决于想要在此集合上(高效)实现的操作。")]),_._v(" "),n("h3",{attrs:{id:"_4-1-动态集合的元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-动态集合的元素"}},[_._v("#")]),_._v(" 4.1. 动态集合的元素")]),_._v(" "),n("p",[_._v("在动态集合的典型实现中，每个元素都有一个对象来表示，如果有一个指向对象的指针，就能对其各个属性进行检查和操作。（有的编程语言不支持指针和对象数据类型，可以利用数组和数据下标来构造对象和指针）")]),_._v(" "),n("p",[_._v("一些类型的动态集合假定对象中的一个属性为标志"),n("strong",[_._v("关键字")]),_._v(" (key)。如果关键字全部不同，可以将动态集合视为一个关键字值的集合。对象可能包含"),n("strong",[_._v("卫星数据")]),_._v(" (satellite data)，它们与其它对象属性一起随对象而移动。卫星数据可以视作为该数据结构中某关键字 key 对应的值对象 val (value)，")]),_._v(" "),n("p",[_._v("一些动态集合以其关键字来自于某个全序集为前提条件，比如实数集、整数集、自然数集，或者按通常字典序排序的所有单词。")]),_._v(" "),n("h3",{attrs:{id:"_4-2-动态集合上的操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-动态集合上的操作"}},[_._v("#")]),_._v(" 4.2. 动态集合上的操作")]),_._v(" "),n("p",[_._v("动态集合上的操作可以分为两类：简单返回有关集合信息的"),n("strong",[_._v("查询操作")]),_._v("和改变集合(信息或集合结构)的"),n("strong",[_._v("修改操作")]),_._v("，比如如下常见操作（这里的“全序集 S”均指集合 S 中元素的关键字 x.key 是全序的）：")]),_._v(" "),n("ul",[n("li",[n("strong",[_._v("搜索")]),_._v(" search(S, k) 属于查询操作\n"),n("ul",[n("li",[_._v("给定一个集合 S 和关键字 k，返回指向 S 中某个元素的指针 x，使得 x.key = k；")]),_._v(" "),n("li",[_._v("如果 S 中没有这样的元素，则返回 NIL 空指针。")])])]),_._v(" "),n("li",[n("strong",[_._v("插入")]),_._v(" insert(S, x) 属于修改操作\n"),n("ul",[n("li",[_._v("将由 x 指向的元素加入到集合 S 中。")]),_._v(" "),n("li",[_._v("通常假定元素 x 中 集合 S 所需要的每个属性（比如 x.key）都已经被初始化好了。")]),_._v(" "),n("li",[_._v("一般而言，插入成功返回布尔值 True；插入失败则返回布尔值 False。")])])]),_._v(" "),n("li",[n("strong",[_._v("删除")]),_._v(" delete(S, x) 属于修改操作\n"),n("ul",[n("li",[_._v("给定指针 x 指向集合 S 中的一个元素，从 S 中删除 x。")]),_._v(" "),n("li",[_._v("或者是给定一个关键字 k，从集合 S 中删除关键字 key=k 的元素，即 delete(S, k)。")]),_._v(" "),n("li",[_._v("一般而言，插入成功返回布尔值 True (或者被删的元素 x)；删除失败则返回布尔值 False (或者 NIL 空指针)。")])])]),_._v(" "),n("li",[n("strong",[_._v("最小值")]),_._v(" minimum(S) 属于查询操作\n"),n("ul",[n("li",[_._v("在全序集 S 上返回一个指向 S 中具有最小关键字的元素 (的指针)。")]),_._v(" "),n("li",[_._v("查询失败 (比如集合 S 为空) 则返回 NIL 空指针。")])])]),_._v(" "),n("li",[n("strong",[_._v("最大值")]),_._v(" maximum(S) 属于查询操作\n"),n("ul",[n("li",[_._v("在全序集 S 上返回一个指向 S 中具有最大关键字的元素 (的指针)。")]),_._v(" "),n("li",[_._v("查询失败 (比如集合 S 为空) 则返回 NIL 空指针。")])])]),_._v(" "),n("li",[n("strong",[_._v("后继")]),_._v(" successor(S, x) 属于查询操作\n"),n("ul",[n("li",[_._v("在全序集 S 上返回比 x 大的后一个元素 (的指针)。")]),_._v(" "),n("li",[_._v("查询失败 (比如集合 S 为空，或者 x 已是最大元素) 则返回 NIL 空指针。")]),_._v(" "),n("li",[_._v("也可以直接根据关键字 k 来查找后继，即 successor(S, k)。")])])]),_._v(" "),n("li",[n("strong",[_._v("前驱")]),_._v(" predecessor(S, x) 属于查询操作\n"),n("ul",[n("li",[_._v("在全序集 S 上返回比 x 小的前一个元素 (的指针)。")]),_._v(" "),n("li",[_._v("查询失败 (比如集合 S 为空，或者 x 已是最小元素) 则返回 NIL 空指针。")]),_._v(" "),n("li",[_._v("也可以直接根据关键字 k 来查找前驱，即 predecessor(S, k)。")])])])]),_._v(" "),n("p",[_._v("在 delete、successor、predecessor 操作中，如果传入的参数是关键字 k 而不是元素对象 x，需保证此数据结构能够较好地支持 search(S, k) 搜索操作，否则这三个操作也会变的低效。例如：堆 Heap 数据结构往往就不能较好地支持 search(S, k) 操作。")]),_._v(" "),n("h3",{attrs:{id:"_4-3-摊还分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-摊还分析"}},[_._v("#")]),_._v(" 4.3. 摊还分析")]),_._v(" "),n("p",[_._v("在 "),n("strong",[_._v("摊还分析")]),_._v(" (Amortized Analysis) 中，求"),n("strong",[_._v("数据结构")]),_._v("的一个"),n("strong",[_._v("操作序列")]),_._v("中所执行的所有操作的平均时间，来评价操作的代价。")]),_._v(" "),n("p",[_._v("因此可以说一个操作的平均代价是很低的，即便序列中某个单一操作的代价很高。摊还分析不同于"),n("strong",[_._v("平均情况分析")]),_._v("，它不涉及概率。它可以保证最坏情况下每个操作的平均性能。")]),_._v(" "),n("ol",[n("li",[n("strong",[_._v("聚合分析")]),_._v(" (aggregate analysis)\n"),n("ul",[n("li",[_._v("此方法用于确定一个含有 n 个操作的序列的"),n("strong",[_._v("总代价的上界")]),_._v(" T(n)，因而每个操作的平均代价为 T(n)/n")]),_._v(" "),n("li",[_._v("此方法将平均代价作为每个操作的摊还代价，因此所有操作具有相同的摊还代价")])])]),_._v(" "),n("li",[n("strong",[_._v("核算法")]),_._v(" (accounting method)\n"),n("ul",[n("li",[_._v("核算法用于分析每个操作的摊还代价。当"),n("strong",[_._v("存在不止一种操作")]),_._v("时，每种操作的摊还代价可能是不同的。")]),_._v(" "),n("li",[_._v("核算法将序列中某些"),n("strong",[_._v("较早的操作")]),_._v("(往往代价很小) 的“"),n("strong",[_._v("余额")]),_._v("” 作为 “预付信用” (prepaid credit) 存储起来，与数据结构中的特定对象相关联。")]),_._v(" "),n("li",[_._v("在操作序列的"),n("strong",[_._v("随后部分")]),_._v("(可能出现代价较高的操作)，存储的信用即可用来为那些缴费少于实际代价的操作"),n("strong",[_._v("支付差额")]),_._v("。")])])]),_._v(" "),n("li",[n("strong",[_._v("势能法")]),_._v(" (potential method)\n"),n("ul",[n("li",[_._v("与核算法类似，势能法也用于分析每个操作的摊还代价，而且也是通过较早操作的余额来补偿稍后操作的差额。")]),_._v(" "),n("li",[_._v("势能法将信用作为数据结构的“"),n("strong",[_._v("势能")]),_._v("”存储起来，与核算法不同在于，它将全体“余额”势能作为一个整体存储，而不是将信用与数据结构中的单个对象相关联、分开存储。")])])])]),_._v(" "),n("p",[_._v("另外可以用势能法分析 "),n("strong",[_._v("动态表")]),_._v(" 的扩充和收缩，对动态列表 list、散列表 hash table 等数据结构的扩缩很有指导意义。详见《CLRS》Chapter 17。")])])}),[],!1,null,null,null);v.default=a.exports}}]);