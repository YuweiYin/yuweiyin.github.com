(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{311:function(t,r,l){"use strict";l.r(r);var e=l(28),_=Object(e.a)({},(function(){var t=this,r=t.$createElement,l=t._self._c||r;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h1",{attrs:{id:"algorithm-graph-theory"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#algorithm-graph-theory"}},[t._v("#")]),t._v(" Algorithm - Graph Theory")]),t._v(" "),l("p",[t._v("By "),l("a",{attrs:{href:"https://yuweiyin.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("YuweiYin"),l("OutboundLink")],1)]),t._v(" "),l("p",[l("strong",[t._v("Shortest Path")])]),t._v(" "),l("h2",{attrs:{id:"目录"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),l("ul",[l("li",[t._v("最短路径\n"),l("ul",[l("li",[t._v("有向无环图的最短路径->拓扑排序")]),t._v(" "),l("li",[t._v("非负权值加权图的最短路径->Dijkstra 算法 (可使用二叉堆优化)")]),t._v(" "),l("li",[t._v("含负权值加权图的最短路径->Bellman-Ford 算法")]),t._v(" "),l("li",[t._v("含负权值加权图的最短路径->SPFA 算法")]),t._v(" "),l("li",[t._v("(稠密带负权图中 SPFA 的效率并不如 Bellman-Ford 高)")]),t._v(" "),l("li",[t._v("全源最短路弗洛伊德算法 Floyd")]),t._v(" "),l("li",[t._v("全源最短路 Johnson 算法")]),t._v(" "),l("li",[t._v("次短路径")]),t._v(" "),l("li",[t._v("第 k 短路径")]),t._v(" "),l("li",[t._v("差分约束系统")]),t._v(" "),l("li",[t._v("平面点对的最短路径(优化)")]),t._v(" "),l("li",[t._v("双标准限制最短路径")])])])])])}),[],!1,null,null,null);r.default=_.exports}}]);