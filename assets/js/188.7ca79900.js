(window.webpackJsonp=window.webpackJsonp||[]).push([[188],{470:function(e,t,a){"use strict";a.r(t);var s=a(28),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"scheme-编程环境的设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scheme-编程环境的设置"}},[e._v("#")]),e._v(" Scheme 编程环境的设置")]),e._v(" "),a("p",[e._v("2013年04月11日 - "),a("a",{attrs:{href:"http://www.yinwang.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("王垠"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"http://www.yinwang.org/blog-cn/2013/04/11/scheme-setup",target:"_blank",rel:"noopener noreferrer"}},[e._v("原文链接"),a("OutboundLink")],1)]),e._v(" "),a("hr"),e._v(" "),a("p",[a("img",{attrs:{src:"/img/yinwang/paredit1.gif",alt:"paredit"}})]),e._v(" "),a("p",[e._v("介绍了这么久的 Scheme，却没有讲过如何配置一个高效的 Scheme 的编程环境。有些人开始学习 Scheme 的时候感觉无从下手，所以今天讲一下它的配置。")]),e._v(" "),a("p",[e._v("Scheme 的配置有很多种方式，我不想介绍太多东西，免得有人看花了眼，所以这里只介绍一下我自己的配置。我不大喜欢像 "),a("a",{attrs:{href:"http://www.neilvandyke.org/quack",target:"_blank",rel:"noopener noreferrer"}},[e._v("Quack"),a("OutboundLink")],1),e._v(" 一类的复杂的环境，因为它们经常有很多多余的功能，却缺少我想要的功能。一旦我想修改它们，又到处出问题。我的配置很简约，我用它写了几千行的超高难度的代码，翻来覆去的改，感觉效率非常高，也没有觉得缺少什么特别重要的东西。")]),e._v(" "),a("p",[e._v("现在我就一步一步的介绍我的配置。")]),e._v(" "),a("h2",{attrs:{id:"安装-scheme"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-scheme"}},[e._v("#")]),e._v(" 安装 Scheme")]),e._v(" "),a("h3",{attrs:{id:"chez-scheme"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chez-scheme"}},[e._v("#")]),e._v(" Chez Scheme")]),e._v(" "),a("p",[e._v("世界上最快，最成熟可靠的 Scheme 实现是 R. Kent Dybvig 所作的 Chez Scheme。它可以把 Scheme 编译成机器代码，运行速度非常高。Chez Scheme 曾经是商业软件，价格昂贵，然而现在却开源了，并且可以免费使用。你可以在这里下载 Chez Scheme 的源代码：")]),e._v(" "),a("p",[e._v("https://github.com/cisco/ChezScheme")]),e._v(" "),a("p",[e._v("编译安装很快很方便，在 Linux 和 Mac 系统基本就是这样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("./configure\nmake\nsudo make install\n")])])]),a("p",[e._v("整个编译安装过程只需要30秒。这是世界上最快编译自己全套系统的编译器。")]),e._v(" "),a("h3",{attrs:{id:"racket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#racket"}},[e._v("#")]),e._v(" Racket")]),e._v(" "),a("p",[e._v("如果你对性能没有特别高的需求，主要用于学习，也可以用 Racket。它可以在这里下载：")]),e._v(" "),a("p",[e._v("http://racket-lang.org")]),e._v(" "),a("p",[e._v("安装应该很容易。Ubuntu 也自带了 Racket，所以可以直接让系统安装它。")]),e._v(" "),a("h2",{attrs:{id:"设置-paredit-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置-paredit-mode"}},[e._v("#")]),e._v(" 设置 ParEdit mode")]),e._v(" "),a("p",[e._v("我编辑 Scheme 的时候都用 Emacs。我使用一个叫做 ParEdit mode 的插件。它可以让你“半结构化”式的编辑 Scheme 和其它的 Lisp 文件。开头你可能会有点不习惯，可是一旦习惯了，你就再也离不开它。")]),e._v(" "),a("p",[e._v("ParEdit mode 可以在这里下载：")]),e._v(" "),a("p",[e._v("http://mumble.net/~campbell/emacs/paredit.el")]),e._v(" "),a("p",[e._v("下载之后，把它放到一个目录里，比如 ~/.emacs.d，然后打开 ~/.emacs 配置文件，加入如下设置：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('(add-to-list \'load-path "~/.emacs.d")\n(autoload \'paredit-mode "paredit"\n  "Minor mode for pseudo-structurally editing Lisp code."\n  t)\n')])])]),a("p",[e._v("这样，只要你使用 M-x paredit-mode 就可以自动载入这个模式。具体的操作方式可以看它的说明（按 C-h m 查看“模式帮助”），我下面也会简单说一下。")]),e._v(" "),a("h2",{attrs:{id:"设置-scheme-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置-scheme-mode"}},[e._v("#")]),e._v(" 设置 scheme mode")]),e._v(" "),a("p",[e._v("我一般就用系统自带的 Scheme 模式，叫 cmuscheme。但是为了方便，我自己写了几个函数，用于在执行 Scheme 代码的时候自动启动解释器，并且打开解释器窗口。你基本只需要把下面的代码拷贝到你的 .emacs 文件里就行：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(';;;;;;;;;;;;\n;; Scheme \n;;;;;;;;;;;;\n\n(require \'cmuscheme)\n(setq scheme-program-name "racket")         ;; 如果用 Petite 就改成 "petite"\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(';; bypass the interactive question and start the default interpreter\n(defun scheme-proc ()\n  "Return the current Scheme process, starting one if necessary."\n  (unless (and scheme-buffer\n               (get-buffer scheme-buffer)\n               (comint-check-proc scheme-buffer))\n    (save-window-excursion\n      (run-scheme scheme-program-name)))\n  (or (scheme-get-process)\n      (error "No current process. See variable `scheme-buffer\'")))\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('(defun scheme-split-window ()\n  (cond\n   ((= 1 (count-windows))\n    (delete-other-windows)\n    (split-window-vertically (floor (* 0.68 (window-height))))\n    (other-window 1)\n    (switch-to-buffer "*scheme*")\n    (other-window 1))\n   ((not (find "*scheme*"\n               (mapcar (lambda (w) (buffer-name (window-buffer w)))\n                       (window-list))\n               :test \'equal))\n    (other-window 1)\n    (switch-to-buffer "*scheme*")\n    (other-window -1))))\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(defun scheme-send-last-sexp-split-window ()\n  (interactive)\n  (scheme-split-window)\n  (scheme-send-last-sexp))\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('(defun scheme-send-definition-split-window ()\n  (interactive)\n  (scheme-split-window)\n  (scheme-send-definition))\n\n(add-hook \'scheme-mode-hook\n  (lambda ()\n    (paredit-mode 1)\n    (define-key scheme-mode-map (kbd "<f5>") \'scheme-send-last-sexp-split-window)\n    (define-key scheme-mode-map (kbd "<f6>") \'scheme-send-definition-split-window)))\n')])])]),a("p",[e._v("我的配置会在加载 Scheme 文件的时候自动载入 ParEdit mode，并且把 F5 键绑定到“执行前面的S表达式”。这样设置的目的是，我只要把光标移动到一个S表达式之后，然后用一根手指头按 F5，就可以执行程序。够懒吧。")]),e._v(" "),a("h2",{attrs:{id:"paredit-mode-的简单使用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#paredit-mode-的简单使用方法"}},[e._v("#")]),e._v(" ParEdit mode 的简单使用方法")]),e._v(" "),a("p",[e._v("ParEdit mode 是一个很特殊的模式。它起作用的时候，你不能直接修改括号。这样所有的括号都保持完整的匹配，不可能出现语法错误。但是这样有一个问题，如果你要把一块代码放进另一块代码，或者从里面拿出来，就不是很方便了。")]),e._v(" "),a("p",[e._v("为此，ParEdit mode 提供了几个非常高效的编辑方式。我平时只使用两个：")]),e._v(" "),a("p",[e._v("1.C-right: 也就是按住 Ctrl 再按右箭头。它的作用是让光标右边的括号，“吞掉”下一个S表达式。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("比如，`(a b c) (d e)`。你把光标放在 `(a b c)` 里面，然后按 `C-right`。结果就是 `(a b c (d e))`。也就是把 `(d e)` 被整个“吞进”了 `(a b c)` 里面。\n")])])]),a("p",[e._v("2.M-r: 去掉外层代码。")]),e._v(" "),a("p",[e._v("这在你需要去掉外层的 let 等结构的时候非常有用。比如，如果你的代码看起来是这样：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(let ([x 10])\n  (* x 2))\n")])])]),a("p",[e._v("当你把光标放在 (* x 2) 的最左边，然后按 M-r，结果就变成了")]),e._v(" "),a("p",[a("code",[e._v("(* x 2)")])]),e._v(" "),a("p",[e._v("也就是把外面的 (let ([x 10]) ...) 给“掀掉”了。")]),e._v(" "),a("p",[e._v("其它的一些按键虽然也有用，不过我觉得这两个是最有用的，甚至不可缺少的。有些其他的自动匹配括号的模式，没有提供这种按键，所以用起来很别扭。")]),e._v(" "),a("h2",{attrs:{id:"设置括号颜色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置括号颜色"}},[e._v("#")]),e._v(" 设置括号颜色")]),e._v(" "),a("p",[e._v("很多人看见 Lisp 就怕了，就是因为它看起来括号太多。可是这样的语法，却是有很大的好处的（参考这篇博文《谈语法》）。如果你真的觉得括号碍眼，你可以稍微调整一下括号的颜色，比如淡灰色。这样括号看起来就没有那么显眼了。")]),e._v(" "),a("p",[e._v("你只需要下载这个 el，放到你的 .emacs.d:")]),e._v(" "),a("p",[e._v("https://www.dropbox.com/s/v0ejctd1agrt95x/parenface.el")]),e._v(" "),a("p",[e._v("然后在 .emacs 里面加入两行：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(require 'parenface)\n(set-face-foreground 'paren-face \"DimGray\")\n")])])]),a("p",[e._v("然后再打开 Scheme 代码的时候，你就会看到是这个样子：")]),e._v(" "),a("p",[a("img",{attrs:{src:"/img/yinwang/scheme-paren.jpeg",alt:"scheme-paren"}})]),e._v(" "),a("p",[e._v("好了，这就是我写 Scheme 的所有配置了。希望这些有所帮助。")])])}),[],!1,null,null,null);t.default=r.exports}}]);