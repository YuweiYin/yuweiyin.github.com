(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{546:function(t,n,s){"use strict";s.r(n);var a=s(28),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"algorithm-data-structure-union-find"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#algorithm-data-structure-union-find"}},[t._v("#")]),t._v(" Algorithm - Data Structure - Union Find")]),t._v(" "),s("p",[t._v("Create Date: 2020.05.04")]),t._v(" "),s("p",[t._v("Last Update Date: 2020.05.04")]),t._v(" "),s("p",[t._v("By "),s("a",{attrs:{href:"https://yuweiyin.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("YuweiYin"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),s("p",[t._v("不相交集合 (Disjoint Set)，顾名思义，表示多个不相交的、没有共同元素的集合。我们希望在其上进行两种操作：")]),t._v(" "),s("ul",[s("li",[t._v("判断某元素属于哪个集合 find")]),t._v(" "),s("li",[t._v("两集合的合并 union")])]),t._v(" "),s("p",[t._v("这也正是并查集 (Union Find) 的名称。它使用类似单链表的结构存储各个不同的集合，并用首元素作为整个集合的"),s("strong",[t._v("代表")]),t._v(" (representative) 元素。")]),t._v(" "),s("p",[t._v("并查集的思路简单，原始版本的代码实现也很容易。不过为了优化其效率，使 find 和 union 操作接近常数时间复杂度，一般需要进行如下两种优化（启发式策略）：")]),t._v(" "),s("ul",[s("li",[t._v("路径压缩 Path Compression")]),t._v(" "),s("li",[t._v("按秩合并 Union by Rank")])]),t._v(" "),s("p",[t._v("该算法的常见应用场景如下：")]),t._v(" "),s("ul",[s("li",[t._v("图的环路检测，可应用于最小生成树 (Minimum Spanning Tree, MST) 中的 Kruskal 算法")]),t._v(" "),s("li",[t._v("集合计数问题，如：计算某个图的连通分支数目、二分图的识别")])]),t._v(" "),s("h2",{attrs:{id:"场景描述及分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#场景描述及分析"}},[t._v("#")]),t._v(" 场景描述及分析")]),t._v(" "),s("p",[t._v("并查集主要用于组织存储多个不相交集合（比如图里面的不同连通分支）的数据，以高效实现如下功能：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("make_set(x)")]),t._v("：建立一个新的集合，它的唯一成员（因而为代表）是 x。\n"),s("ul",[s("li",[t._v("因为初始时各个集合是不相交的，故 x 不会出现在别的某个集合中。")])])]),t._v(" "),s("li",[s("code",[t._v("find(x)")]),t._v("：查找元素 x 所在的集合是哪个。\n"),s("ul",[s("li",[t._v("常使用集合中的某个代表元素（比如首元素）来表示该集合。")])])]),t._v(" "),s("li",[s("code",[t._v("union(y, z)")]),t._v("：将元素 y 和元素 z 所在的集合合并成一个集合。\n"),s("ul",[s("li",[t._v("返回值常为合并后的集合的代表元素。")]),t._v(" "),s("li",[t._v("注意：如果 y 和 z 本身就属于同一集合，则此操作不会带来改变。")])])])]),t._v(" "),s("h3",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),s("p",[t._v("例如：有两个集合 "),s("code",[t._v("A = {3, 1, 2}")]),t._v(" 和 "),s("code",[t._v("B = {8, 7, 9}")])]),t._v(" "),s("p",[t._v("那么 find(2) = A，以及 find(9) = B。")]),t._v(" "),s("p",[t._v("如果用集合中的首元素代表本集合，那么 find(2) = 3，以及 find(9) = 8。")]),t._v(" "),s("p",[t._v("而且，此时可以看出，由于 find(2) 的结果不等于 find(9) 的结果，故可以判断 2 和 9 此时不属于同一个集合。")]),t._v(" "),s("p",[t._v("如果执行 union 操作，如 union(1, 2) = 3，由于 1 和 2 本就在同一集合内，所以本次操作不会改变什么。")]),t._v(" "),s("p",[t._v("又如 union(3, 7) = 3，将集合 A 和 B 合并在了一起，新集合的代表元素（首元素）为 3。")]),t._v(" "),s("h2",{attrs:{id:"设计-细节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计-细节"}},[t._v("#")]),t._v(" 设计 & 细节")]),t._v(" "),s("h3",{attrs:{id:"建立集合、基础的-find-和-union"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#建立集合、基础的-find-和-union"}},[t._v("#")]),t._v(" 建立集合、基础的 Find 和 Union")]),t._v(" "),s("p",[t._v("可以将此集合抽象为一种链状结构，每个元素结构体含如下属性：")]),t._v(" "),s("ul",[s("li",[t._v("key：元素的键 key")]),t._v(" "),s("li",[t._v("father：指向其父元素的指针")])]),t._v(" "),s("p",[t._v("初始时，可以设置每个元素的 father 指针指向一个特殊元素，也可以让每个元素的 father 指针指向自己（后者更通用）。")]),t._v(" "),s("p",[t._v("元素之间若要组成集合，可以采取 union 操作。")]),t._v(" "),s("p",[t._v("前文所示集合 A 的结构为 3 <- 1 <- 2，其中 3 有自环。一旦对集合 A 中的元素执行 find 操作，就会随指针逐级向前移动，直到经历了一个自环，就停止在首元素位置，返回 find 结果。类似地，集合 B 的结构为 8 <- 7 <- 9，其中 8 有自环。")]),t._v(" "),s("p",[t._v("集合 A 和集合 B 的结构如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/info-technology/algorithm/data-structure/union-find-1.png",alt:"union-find-1"}})]),t._v(" "),s("p",[t._v("当执行操作 find(2) 时，流程如下：")]),t._v(" "),s("ol",[s("li",[t._v("从元素 2 出发，沿 father 指针移动到元素 1")]),t._v(" "),s("li",[t._v("然后再从元素 1 移动到元素 3")]),t._v(" "),s("li",[t._v("随后发现 3 的 father 指针指向自己，则停止，输出元素 3")])]),t._v(" "),s("p",[t._v("当执行操作 find(8) 时，流程类似：从元素 8 出发，发现 8 的父元素还是 8，则停止，输出元素 8")]),t._v(" "),s("p",[t._v("当执行操作 union(1, 2) 时，流程如下：")]),t._v(" "),s("ol",[s("li",[t._v("执行 find(1) 返回元素 3")]),t._v(" "),s("li",[t._v("执行 find(2) 返回元素 3")]),t._v(" "),s("li",[t._v("发现 find(1) 结果等于 find(2)，结束 union，不执行别的操作。")])]),t._v(" "),s("p",[t._v("另外，可以稍作优化：如果在执行 find(1) 的途中找到了元素 2，或着是在执行 find(2) 的图中的找到了元素 1，那么可以判断出元素 1 和元素 2 在同一个集合里，此时直接结果 union 操作。但此优化不如下文的"),s("strong",[t._v("路径压缩")]),t._v("方法有效。")]),t._v(" "),s("p",[t._v("当执行操作 union(3, 7) 时，流程如下：")]),t._v(" "),s("ol",[s("li",[t._v("执行 find(3) 返回元素 3")]),t._v(" "),s("li",[t._v("执行 find(7) 返回元素 8")]),t._v(" "),s("li",[t._v("用一种简单的规则，决定出一个新集合的代表元素。\n"),s("ul",[s("li",[t._v("比如采用 min(3, 8) = 3 为新代表元素，")]),t._v(" "),s("li",[t._v("或者是让 union 函数的第一个参数所在集合的代表元素作为新集合的代表元素。")]),t._v(" "),s("li",[t._v("但更好的优化方案是下文所述的"),s("strong",[t._v("按秩合并")]),t._v("，选择原本树高更高的集合的代表元素。")])])]),t._v(" "),s("li",[t._v("让元素 8 的 father 指针指向元素 3，即完成 union 操作。")])]),t._v(" "),s("p",[t._v("合并结果如下图所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/info-technology/algorithm/data-structure/union-find-2.png",alt:"union-find-2"}})]),t._v(" "),s("h3",{attrs:{id:"路径压缩-path-compression"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路径压缩-path-compression"}},[t._v("#")]),t._v(" 路径压缩 Path Compression")]),t._v(" "),s("p",[t._v("前述每次对某一集合中元素的 find 操作，其时间复杂度都是 O(n)，其中 n 为该集合的元素个数。")]),t._v(" "),s("p",[t._v("这种情况下，大量（设为 q 次）的 find 操作就会导致 O(qn) 的总时间复杂度。")]),t._v(" "),s("p",[t._v("由于 find 操作最终只关心代表元素，因此如果集合中所有元素的 father 指针都能直接指向代表元素，那么每次 find 操作的路径长度就减为 1 了，这也正引出了"),s("strong",[t._v("路径压缩")]),t._v("的思路：find 路径上，如果当前元素不是集合代表元素，那么它必然会向上移动至其父元素，那么此时让它与它的父元素"),s("strong",[t._v("同级")]),t._v("，即让当前元素的 father 指针直接指向它的爷爷元素。")]),t._v(" "),s("p",[t._v("例如，当执行操作 find(2) 时，进行路径压缩优化后的流程如下：")]),t._v(" "),s("ol",[s("li",[t._v("从元素 2 出发，发现 2 的 father 指针不指向自己，那么 2 不是首元素，则让元素 2 的 father 指针直接指向其爷爷结点 3，并移动到其父结点 1。\n"),s("ul",[s("li",[t._v("需要 temp 指针记录元素 2 的父结点 1。")])])]),t._v(" "),s("li",[t._v("然后再从元素 1 出发，同样发现 1 的 father 指针不指向自己，那么 1 不是首元素，则让 1 的 father 指针指向其爷爷结点（同其父结点）3，并移动到其父结点 3。")]),t._v(" "),s("li",[t._v("随后发现 3 的下一个元素还是 3，则停止，输出元素 3")])]),t._v(" "),s("p",[t._v("经过路径压缩处理后，find 操作的平均时间复杂度就是 O(1) 常数级别了。")]),t._v(" "),s("h3",{attrs:{id:"按秩合并-union-by-rank"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按秩合并-union-by-rank"}},[t._v("#")]),t._v(" 按秩合并 Union by Rank")]),t._v(" "),s("p",[t._v("如果待合并的两个集合（树状结构）树高不同，假设集合 A 的树高为 3，集合 B 的树高为 6。")]),t._v(" "),s("p",[t._v("这里"),s("strong",[t._v("将树高称为秩")]),t._v("，与集合的秩（集合中元素的数目）有所区别。")]),t._v(" "),s("ul",[s("li",[t._v("那么如果以集合 A 的代表元素作为合并后新集合的代表元素，新集合的树高为 6 + 1 = 7；")]),t._v(" "),s("li",[t._v("如果以集合 B 的代表元素作为合并后新集合的代表元素，那么新集合的树高为 6（因为 3+1 = 4 < 6 不占主导地位）；")])]),t._v(" "),s("p",[t._v("显然，降低树高（秩）有助于提升 find 效率，因此在选择新集合的代表元素时，需要"),s("strong",[t._v("按秩合并")]),t._v("：每次都让秩较小的指向秩较大的，可以使得树高至多为 log_2 (n)，即 find 操作的最坏情况也能是 O(log n) 级别。")]),t._v(" "),s("h3",{attrs:{id:"实现细节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现细节"}},[t._v("#")]),t._v(" 实现细节")]),t._v(" "),s("p",[t._v("为了按秩合并，需要在集合元素结构体 SetNode 中设置 rank 成员属性。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SetNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 本元素的 key 号")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("father "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指针，指向本元素的父结点，初始时指向自己")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rank "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 本元素所在集合的 rank 秩")]),t._v("\n")])])]),s("p",[t._v("为了将 key 映射到 SetNode 结构体，在 UnionFind 类中设置了 key2node 字典。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnionFind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key_array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key_array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("disjoint_set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 存放全体元素 SetNode 结构体")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key2node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dict")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 key 号映射为 SetNode 结构体")]),t._v("\n")])])]),s("h2",{attrs:{id:"代码范例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码范例"}},[t._v("#")]),t._v(" 代码范例")]),t._v(" "),s("h3",{attrs:{id:"python"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python"}},[t._v("#")]),t._v(" Python")]),t._v(" "),s("p",[t._v("Python 环境：Python 3.7")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/env python")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding:utf-8 -*-")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""=================================================\n@Project : algorithm/data_structure\n@File    : union-find.py\n@Author  : YuweiYin\n@Date    : 2020-05-04\n=================================================="""')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" sys\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" time\n\n"),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""\n并查集 (Union Find)\n不相交集合 (Disjoint Set, DS)\n"""')]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SetNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 本元素的 key 号")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("father "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指针，指向本元素的父结点，初始时指向自己")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rank "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 本元素所在集合的 rank 秩")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UnionFind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构造不相交集合")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 时间复杂度 O(n)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__init__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key_array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("set_len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key_array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("disjoint_set "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 存放全体元素 SetNode 结构体")]),t._v("\n        self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key2node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dict")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 key 号映射为 SetNode 结构体")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" key_array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            new_node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SetNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key2node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" new_node\n            self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("disjoint_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("new_node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# find 操作；查找 key 为 x 的元素所在集合的代表元素。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 原始的 find 操作，时间复杂度与查询元素所在集合的秩呈线性关系")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# def find(self, x):")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     if x in self.key2node:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         node_x = self.key2node[x]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     else:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         return None")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     while node_x.father != node_x:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         node_x = node_x.father")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     return node_x")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# find 操作经过路径压缩优化后，平均时间复杂度为 O(1)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key2node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            node_x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key2node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" node_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("father "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" node_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("father\n            node_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("father "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("father"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("father\n            node_x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" temp\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" node_x\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# union 操作；将 key 分别为 x 和 y 的元素 所在的集合合并成一个新集合，返回新集合的代表元素。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 原始的 union 操作，选择返回 union 函数首个参数代表，的元素可能导致树过高、不平衡")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# def union(self, x, y):")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     root_x = self.find(x)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     root_y = self.find(y)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     if root_x is None or root_y is None:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         return None")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     else:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         if root_x != root_y:")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#             # 此处未做优化，默认选择 union 函数首个参数代表的元素作为新集合的代表元素")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#             root_y.father = root_x")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         return root_x")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里进行按秩合并优化，选择 find 结果中 秩更小的元素作为新集合的代表元素")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 经过按秩合并优化后，树高至多为 log n，因此平均时间复杂度为 O(1)、最坏时间复杂度为 O(log n)")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("union")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        root_x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("find"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        root_y "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("find"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" root_x "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" root_y "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" root_x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" root_y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" root_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rank "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" root_y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rank"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果 root_x 的秩小于 root_y 的秩，则让 root_x 指向 root_y")]),t._v("\n                    root_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("father "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" root_y\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改 y 的秩为 y 秩与 x 秩加一中的较大值，")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因为 root_y 被 root_x 所指不一定使得 root_y 的树高提升。")]),t._v("\n                    root_y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rank "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root_y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rank"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" root_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rank "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root_y\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 否则让 root_y 指向 root_x")]),t._v("\n                    root_y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("father "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" root_x\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改 x 的秩为 x 秩与 y 秩加一中的较大值")]),t._v("\n                    root_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rank "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root_x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rank"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" root_y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rank "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root_x\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 二者相同，任意返回一个。此处选择返回 union 函数首个参数代表的元素")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root_x\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print_set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" node "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" self"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("disjoint_set"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    key_array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n    union_find "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" UnionFind"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key_array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    union_find"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("union"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3 <- 1")]),t._v("\n    union_find"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("union"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路径压缩 & 按秩合并 3 <- 2")]),t._v("\n    union_find"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("union"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 8 <- 7")]),t._v("\n    union_find"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("union"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路径压缩 & 按秩合并 8 <- 9")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# union_find.print_set()")]),t._v("\n\n    start "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process_time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" union_find"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("find"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3")]),t._v("\n    end "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("process_time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" res "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("None")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("isinstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" SetNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'res_key:'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'find None!'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Running Time: %.5f ms'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" __name__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"__main__"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    sys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")])])}),[],!1,null,null,null);n.default=e.exports}}]);